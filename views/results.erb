<%
# creating a dummy search, in case that user has not any preference yet.
# such a dummy search won't never be saved in the database.
s = Leads::FlSearch.new ({
    'name' => 'dummy',
    'description' => 'This search should never be saved in the database.',
    'id_user' => @login.id_user,
    'saved' => false,
    'no_of_results' => -1, # unknown - no matters
    'no_of_companies' => -1, # unknown - no matters
    'positions' => [],
    'locations' => [],
    'industries' => [],
})

# credits
credits = BlackStack::I2P::Account.where(:id=>@login.user.id_account).first.credits('leads')

# getting the search
sid = @login.user.preference("leads.results.sid", '', params[:sid])

# if the user has preference for any past search, then I use such a search
# if the user has not preference for any past search, then I keep the dummy search defined above.
s = Leads::FlSearch.where(:id=>sid).first if sid.to_s.guid?

# defining positive filters, to show in the hidden fields
positive_positions = s.positions.select { |p| p.positive }.map { |p| p.value }.join(',') 
positive_industries = s.industries.select { |p| p.positive }.map { |i| i.fl_industry.name }.join(',') 
positive_locations = s.locations.select { |p| p.positive }.map { |l| l.value }.join(',') 

# defining negative filters, to show in the hidden fields
negative_positions = s.positions.select { |p| !p.positive }.map { |p| p.value }.join(',') 
negative_industries = s.industries.select { |p| !p.positive }.map { |i| i.fl_industry.name }.join(',') 
negative_locations = s.locations.select { |p| !p.positive }.map { |l| l.value }.join(',') 

# getting the page number
page_number = @login.user.preference("leads.results.filter.pagination.page", 1, params[:number].nil? ? nil : params[:number].to_i)

# define the pagination setting
i = {
  'page' => page_number,
  'pagesize' => 25,
  'sortcolumn' => 'id',
  'sortorder' => 'asc',
  'id_account' => @login.user.id_account, # additional parameter requried by FlSearch to build the query
}

# getting rows
rows = s.rows(i)

# getting pagination status
status = s.status(i)
%>

<div class="mynavbar mysticky">
  <section class="row-fluid">
    <div class="span6">
      <%=nav2("Leads", "/leads/landing", "Results")%>
    </div>
    <div class="span6" align="right" style="text-align: right;alignment-adjust: right; margin-left: 0;">
      <a class="btn btn-blue" id='new_search' href='/leads/step1'><i class='icon-plus'></i> New</a>
      <button type="button" class="btn btn-gray" data-toggle="modal" id='open_save_modal' data-target=".save_modal">Save Search</button>
      <button type="button" class="btn btn-gray" data-toggle="modal" id='open_export_leads_modal' data-target=".export_leads">Exports Leads</button>
      <a class="btn btn-green" id='add_credits' href='/leads/plans'>Buy Credits!</a>
    </div>
  </section>
</div>

<section class="row-fluid">
  <section class='span4 box'>
    <div id='positions'></div>
    <div id='industries'></div>
    <div id='locations'></div>
    <div style='width:100%;'>
        <button class='btn btn-blue btn-xlarge input-block-level' onclick="$('#search').click();"><i class='icon-search'></i> Search</button>
    </div>
  </section>

<style>
div.lead-card {
  position:relative;
  height:115px;
  overflow:hidden;
  width:100%;
  margin-bottom: 25px;
  overflow: visible;
}

div.lead-card div.acronym {
  position:absolute;
  left:0;
  top:0;
  width:70px;
  height:50px;
  overflow:hidden;
  border-radius:35px;
  padding-top:20px;
  font-size:32px;
  text-align:center;
  vertical-align:middle;
  color:white;
}

div.lead-card div.acronym-color-0 {
  background-color:rgb(0,128,192);
}

div.lead-card div.acronym-color-1 {
  background-color:rgb(0,0,160);
}

div.lead-card div.acronym-color-2 {
  background-color:rgb(0,128,64);
}

div.lead-card div.acronym-color-3 {
  background-color:rgb(255,128,0);
}

div.lead-card div.acronym-color-4 {
  background-color:rgb(128,0,128);
}

div.lead-card div.acronym-color-5 {
  background-color:rgb(128,0,255);
}

div.lead-card div.acronym-color-6 {
  background-color:rgb(255,0,128);
}

div.lead-card div.acronym-color-7 {
  background-color:rgb(0,255,128);
}

div.lead-card div.acronym-color-8 {
  background-color:rgb(0,128,255);
}

div.lead-card div.acronym-color-9 {
  background-color:rgb(0,128,128);
}

div.lead-card div.acronym span {
  text-align:center;
  vertical-align:middle;
}

div.lead-card div.buttons {
  position:absolute;
  right:5px;
  width:170px;
  top:0;
}

div.lead-card div.buttons div.btn-group {
  position:relative;
}

div.lead-card div.buttons div.btn-group ul.dropdown-menu {
  position: absolute;
  right:0px;
  top:25px;
  width:155px;
}

div.lead-card div.insights {
  position:absolute;
  left:125px;
  top:0;
  width:calc(100% - 70px - 155px - 65px);
  hright:50px;
  overflow:hidden;
}

div.lead-card div.insights span.name {
  font-size:24px;
}

div.lead-card div.insights span.headline {
  font-size:12px;
}

div.lead-card div.data {
  position:absolute;
  right:5px;
  top:35px;
  width:155px;
  hright:50px;
  overflow:hidden;
  z-order: 99999999;
}

div.lead-card div.data span.headline {
  font-size:12px;
}
</style>

  <section class='span8 box'>
    <p><b>Records:</b> <%=status['row_from'].to_label%> to <%=status['row_to'].to_label%> <b>of</b> <%=status['total_rows'].to_label%></p>
    <br/>

    <%
    rows.each do |row|
      acronym = row[:name].to_s[0..1].capitalize
      i = acronym.chr.ord.to_i % 10
      export_button_color = row[:exported] ? 'blue' : 'green'
      export_button_text = row[:exported] ? 'Exported' : 'Export'
    %>
    <div class='span12 lead-card' id='sample<%=i%>'>
      <div class='acronym acronym-color-<%=i%>'>
        <span><%=acronym.to_s.encode_html%></span>
      </div>

      <div class='buttons'>
      <%
      # if the account has no credits, and the leads has not been exported, then don't show the export button
      if credits > 0 || row[:exported]
      %>
        <div class="btn-group">
          <button class="btn btn-<%=export_button_color%> dropdown-toggle btn-export-lists" data-id-lead='<%=row[:id].to_guid%>' data-toggle="dropdown"><span class='caption'><%=export_button_text.to_s.encode_html%></span> <span class="caret"></span></button>
          <ul class="dropdown-menu ul-export-lists" data-id-lead='<%=row[:id].to_guid%>'>
            <div class='div-export-lists' data-id-lead='<%=row[:id].to_guid%>'>
              <!-- fill the div by AJAX when the user clicks on the export button -->
            </div>
            <li class="divider"></li>
            <li>
              <p>Create New List</p>
              <input class='input input-medium input-export-lists' data-id-lead='<%=row[:id].to_guid%>' /><br/> 
              <button class='btn btn-link btn-create-export-list' data-id-lead='<%=row[:id].to_guid%>'><i class='icon-plus'></i> Add</button>
            </li>
          </ul>
        </div>      
      <%
      else # if credits > 0
      %>
        <a class='btn btn-green' href='/leads/plans'>Buy Credits!</a>
      <%
      end # if credits > 0
      %>
      </div>

      <div class='insights'>
          <span class='name'><%=row[:name].to_s.encode_html%> </span>
          <%
          if !row[:linkedin_url].nil?
          %>
          <a href='<%=row[:linkedin_url].to_s.encode_html%>' target='_window'><i class='icon-linkedin'></i></a>
          <%
          end
          %>
          <br/>
          <span class='headline li-headline'><%=row[:position].to_s.encode_html%></span>
          <br/>
          <span class='headline'><b>location:</b> <span class='li-location'><%=row[:stat_location_name].to_s.encode_html%></span></span>
          <br/>
          <span class='headline'><b>industry:</b> <span class='li-industry'><%=row[:stat_industry_name].to_s.encode_html%></span></span>
      </div>
      <div class='data'>
          <%
          if row[:stat_company_name].to_s.size > 0
          %>
          <span class='headline'><i class='icon-briefcase'></i> <span class='li-company'><%=row[:stat_company_name].to_s.encode_html%></span></span>
          <br/>
          <%
          end
          %>

          <div class='contact-info' data-id-lead='<%=row[:id].to_guid%>'>
          <%
          if row[:stat_has_email]
          %>
          <span class='headline'><i class='icon-envelope'></i> <span class='email'>***@****.com</span></span>
          <br/>
          <%
          end
          %>

          <%
          if row[:stat_has_phone]
            %>
          <span class='headline'><i class='icon-phone'></i> <span class='phone'>***@****.com</span></span>
          <%
          end
          %>
          </div>
      </div>
    </div>
    <%
    end
    %>
    <div class="pagination"></div>
    <script>
      drawPagination($(".pagination"), <%=page_number%>, <%=status['total_pages']%>);
    </script>
    <br>
  </section>
</section>

<!-- Modal Exports Leads-->
<div class="modal fade export_leads" >
  <div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
    <h3>Exports Contacts</h3>
  </div>
  <form action="/leads/filter_export_contacts" method="post">
    <div class="modal-body">
      <div class="row-fluid">Contacts per Company</div>
      <div class="radio">
        <label><input type="radio" name="optradio" checked>Multiple (Recommended)</label>
      </div>
      <div class="radio">
        <label><input type="radio" name="optradio" >One</label>
      </div>
      <div style="margin-top: 5px;">Total Contacts </div>
      <div>
        <div class="radio">
          <label>
            <input type="checkbox" id="export_checkbox">
            <input type="hidden" id="export_only" name="export_only">
            Export only first
            <input type="text" id="no_of_contacts" name="no_of_contacts" placeholder="102">
            contacts</label>
        </div>
      </div>
      <div class="row-fluid">Name your file
        <input type="text" id="file_name" name="file_name" placeholder="sample">
        .csv
      </div>
      <input type="hidden" name="total-rows" value="<%=status['total_rows']%>">
      <input type="hidden" name="position" id="e-position">
      <input type="hidden" name="industry" id="e-industry">
      <input type="hidden" name="location" id="e-location">
    </div>
    <div class="modal-footer">
      <a href="#" data-dismiss="modal" class="btn">Close</a>
      <button type="submit" id="save-export" disabled class="btn btn-primary">Save</button>
    </div>
  </form>
</div>

<!-- hidden form with fitlers to submit -->
<section class='row-fluid' style='visibility:hidden;width=0;height=0;'>
  <form id="filters-form" action="/leads/filter_results" method="post">
    <input class="input input-block-level" id="positive_positions" name="positive_positions" value="<%= positive_positions.to_s.encode_html%>" />
    <input class="input input-block-level" id="positive_industries" name="positive_industries" value="<%= positive_industries.to_s.encode_html%>" />
    <input class="input input-block-level" id="positive_locations" name="positive_locations" value="<%=positive_locations.to_s.encode_html%>" />

    <input class="input input-block-level" id="negative_positions" name="negative_positions" value="<%= negative_positions.to_s.encode_html%>" />
    <input class="input input-block-level" id="negative_industries" name="negative_industries" value="<%= negative_industries.to_s.encode_html%>" />
    <input class="input input-block-level" id="negative_locations" name="negative_locations" value="<%=negative_locations.to_s.encode_html%>" />

    <button type="submit" class="btn btn-link" id='search' name='search'>Search</button>
  </form>
</section>

<!-- Modal Save Search -->
<div class="modal fade save_modal" >
  <div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
    <h3>Save this search</h3>
  </div>
  <form action="/leads/filter_save_search" id="search-form" method="post" class="form-horizontal">
    <div class="modal-body">
      <label for="inputName">Name <i>(required)</i></label>
      <input type="text" style="width: 97%" id="inputName" maxlength="255" name="search_name" placeholder="Name">
      <br/><br/>
      <label for="inputDescription">Description</label>
      <textarea name="search_description" style="width: 97%" placeholder="Description" maxlength="2000" id="inputPassword" cols="30" rows="10"></textarea>
      <input type="hidden" name="positive_positions" id='f_positive_positions' value="<%= positive_positions.to_s.encode_html%>" />
      <input type="hidden" name="positive_industries" id='f_positive_industries' value="<%= positive_industries.to_s.encode_html%>" />
      <input type="hidden" name="positive_locations" id='f_positive_locations' value="<%=positive_locations.to_s.encode_html%>" />
      <input type="hidden" name="negative_positions" id='f_negative_positions' value="<%= negative_positions.to_s.encode_html%>" />
      <input type="hidden" name="negative_industries" id='f_negative_industries' value="<%= negative_industries.to_s.encode_html%>" />
      <input type="hidden" name="negative_locations" id='f_negative_locations' value="<%=negative_locations.to_s.encode_html%>" />
    </div>
    <div class="modal-footer">
      <a href="#" data-dismiss="modal" class="btn">Close</a>
      <button type="submit" id="save-search" disabled class="btn btn-primary">Save</button>
    </div>
  </form>
</div>

<script type="text/javascript" charset="utf-8">
    
  // filters
  var positions = document.getElementById('positions');
  var industries = document.getElementById('industries');
  var locations = document.getElementById('locations');

  // update the hidden textfields with the values of the filters
  function update_hidden_fields() {
    // positive positions
    let i = 0;
    let s = '';
    filtersJs.getPositiveValues(positions).forEach(function(value) {
      if (i>0) { s += ','; }
      s += value.trim();
      i++;
    });
    $('#positive_positions').val(s);

    // negative positions
    i = 0;
    s = '';
    filtersJs.getNegativeValues(positions).forEach(function(value) {
      if (i>0) { s += ','; }
      s += value.trim();
      i++;
    });
    $('#negative_positions').val(s);

    // positive industries
    i = 0;
    s = '';
    filtersJs.getPositiveValues(industries).forEach(function(value) {
      if (i>0) { s += ','; }
      s += value.trim();
      i++;
    });
    $('#positive_industries').val(s);

    // negative industries
    i = 0;
    s = '';
    filtersJs.getNegativeValues(industries).forEach(function(value) {
      if (i>0) { s += ','; }
      s += value.trim();
      i++;
    });
    $('#negative_industries').val(s);

    // positive locations
    i = 0;
    s = '';
    filtersJs.getPositiveValues(locations).forEach(function(value) {
      if (i>0) { s += ','; }
      s += value.trim();
      i++;
    });
    $('#positive_locations').val(s);

    // negative locations
    i = 0;
    s = '';
    filtersJs.getNegativeValues(locations).forEach(function(value) {
      if (i>0) { s += ','; }
      s += value.trim();
      i++;
    });
    $('#negative_locations').val(s);
  }

  // enable/disable the add button depending on the value of the textfield
  function enable_add_button(id_lead) {
    // find the ul with this data-id-lead='id_lead'
    let ul = document.querySelector('ul.ul-export-lists[data-id-lead="'+id_lead+'"]');
    // find the button inside the ul
    let button = ul.querySelector('button.btn-create-export-list');
    // find the textfield inside the ul
    let textfield = ul.querySelector('input.input-export-lists');
    // if the textfield is empty, disable the button
    if (textfield.value.trim() == '') {
      // disable the button
      button.disabled = true;
      // remove any span just below the textfield
      let span = ul.querySelector('span');
      if (span) {
        // remove span
        span.remove();
      }
    } else {
      // if the name already exists in the list, disabe the button
      if (ul.querySelector('li[data-name="'+textfield.value.trim()+'"]')) {
        // disable the button
        button.disabled = true;
        // show a red text 'Name already exists' just below the textfield
        textfield.parentNode.insertBefore(document.createElement('span'), textfield.nextSibling).innerHTML = 'Name already exists';
      } else {
        // enable the button
        button.disabled = false;
        // remove any span just below the textfield
        let span = ul.querySelector('span');
        if (span) {
          // remove span
          span.remove();
        }
      }
    }
  }

  // remove an export list
  function remove_export_list(id_lead, id_export) {
    // find the il with this data-id-lead='id_lead' and data-id-export='id_export'
    let li = document.querySelector('li[data-id-lead="'+id_lead+'"][data-id-export-list="'+id_export+'"]');
    // delete the element
    li.remove();
  }

  // receive a hash descriptor of the export related with the lead { id:, filename:, belonging: }
  function add_export_list(id_lead, h, opacity='1.0') {
    // find the div
    let div = document.querySelector('div.div-export-lists[data-id-lead="'+id_lead+'"]');
    // remove '<i>' element with innert text 'No export lists found' from the div content
    $('i:contains("No export lists found")').remove();
    // create the li element, with hand cursor
    let li = document.createElement('li');
    li.setAttribute('data-id-export-list', h.id);
    li.setAttribute('data-id-lead', id_lead);
    li.setAttribute('data-name', h.filename);
    li.setAttribute('data-belonging', h.belonging.toString());
    li.style.cursor = 'pointer';
    li.style.opacity = opacity;
    // create an icon-ok element, with style green text color
    let icon = document.createElement('i');
    icon.setAttribute('class', 'icon-ok');
    icon.setAttribute('data-id-export-list', h.id);
    icon.setAttribute('data-id-lead', id_lead);
    if ( h.belonging ) { 
      icon.setAttribute('style', 'color: green');
    } else {
      icon.setAttribute('style', 'color: gray');
    }
      // add the icon and the name of the list to the anchor
    li.appendChild(icon);
    li.appendChild(document.createTextNode(' '));
    li.appendChild(document.createTextNode(h.filename));
    // add the li to the ul
    $(div).append(li);
    // on click on the li, call ajax to add/remove the lead from/to the export list
    li.addEventListener('click', function(e) {
      // decide the access point to call
      if ($(li).attr('data-belonging') == 'true') {
        // remove from the list
        access_point = 'remove_lead_from_export_list';
      } else {
        // add to the list
        access_point = 'add_lead_to_export_list';
      }
      // set the li with 50% opacity, to show that it is being processed
      li.style.opacity = '0.5';
      // call the ajax
      $.ajax({
        url: '/ajax/leads/'+access_point+'.json',
        type: 'POST',
        data: {
          id_lead: id_lead,
          id_export: h.id
        },
        success: function(data) {
          // get the json response
          let response = JSON.parse(data);
          // if the response is ok, update the icon
          if (response.status == 'success') {
            // the titlt is updated immedaitelly after the ajax call. don't wait for response because of an ux matter. 
            // update the li opacity, to show that is has been processed successfully
            li.style.opacity = '1.0';
            // update the credits in the header
            i2p_update_header('leads');
          } else {
            if ( response.status =~ /No Credits/ ) {
              window.location.replace('/leads/plans');
            } else {
              alert('An error occured while updating the list:' + h.filename + '. Error: ' + response.status);
            }
          }
        },
        error: function(data) {
          alert('Unknown error occured while updating the list:' + h.filename + '.');
        },
      });
      // better user experience: unlock data immediatelly. don't wait until the ajax success
      // unlock contact information
      unlock_data(id_lead);
      // find the icon about this export list and this lead
      let icon = document.querySelector('i[data-id-export-list="'+h.id+'"][data-id-lead="'+id_lead+'"]');
      // if the icon is green, change it to gray
      if ($(li).attr('data-belonging') == 'true') {
        icon.setAttribute('style', 'color: gray');
        li.setAttribute('data-belonging', 'false');
      } else {
        icon.setAttribute('style', 'color: green');
        li.setAttribute('data-belonging', 'true');
      }
      // JavaScript, stop additional event listeners
      // reference: https://www.w3schools.com/jsref/event_stopimmediatepropagation.asp
      e.stopImmediatePropagation();
    });
  }

  function unlock_data(id_lead) {
    // find the div
    let div = document.querySelector('div.contact-info[data-id-lead="'+id_lead+'"]');
    // remove everything inside the div
    div.innerHTML = '';
    // add loading legend
    i = document.createElement('i');
    i.innerHTML = 'Loading data...';
    div.appendChild(i);
    // call the ajax
    $.ajax({
      url: '/ajax/leads/get_lead_data.json',
      type: 'POST',
      data: {
        id_lead: id_lead
      },
      success: function(data) {
        // get the json response
        let response = JSON.parse(data);
        // if the response is ok, update the div
        if (response.status == 'success') {
          // change export button .btn-export-lists color and text
          // remove class btn-green
          // remove class btn-blue
          // add class btn-blue
          // set 'Exported' as inner text in the span with class .caption inside such a buttton
          let button = document.querySelector('button.btn-export-lists[data-id-lead="'+id_lead+'"]');
          button.classList.remove('btn-green');
          button.classList.remove('btn-blue');
          button.classList.add('btn-blue');
          button.querySelector('span.caption').innerHTML = 'Exported';
          // remove the loading legend
          div.innerHTML = '';
          // draw the datas
          response.datas.forEach(function(h) {
            // create the child span
            let span = document.createElement('span');
            // create icon with icon-envelope or icon-phone, depending on the type
            // create span with class email or phone, depending on the type
            // create anchor with href mailto or tel, depending on the type
            let icon = document.createElement('i');
            let a = document.createElement('a');
            if ( h.type == <%=Leads::FlData::TYPE_EMAIL.to_s%> ) {
              icon.setAttribute('class', 'icon-envelope');
              span.setAttribute('class', 'email');
              a.setAttribute('href', 'mailto:'+h.value);
            } else if ( h.type == <%=Leads::FlData::TYPE_PHONE.to_s%> ) {
              icon.setAttribute('class', 'icon-phone');
              span.setAttribute('class', 'phone');
              a.setAttribute('href', 'tel:'+h.value);
            }
            // set overflow hidden for the div
            div.style.overflow = 'hidden';
            a.style.overflow = 'hidden';
            span.style.overflow = 'hidden';
            // draw
            a.appendChild(document.createTextNode(h.value));
            span.appendChild(icon);
            span.appendChild(document.createTextNode(' '));
            span.appendChild(a);
            span.appendChild(document.createElement('br'));
            div.appendChild(span);
          });
        } else {
          alert('An error occured while unlocking lead data. Error: ' + response.status);
        }
      },
      error: function(data) {
        alert('Unknown error occured while unlocking lead data.');
      },
    });
  }

  // 
  $(document).ready(function () {

    // load data of already exported leads
    <%
    rows.each do |row|
      if row[:exported]
      %>
        unlock_data('<%=row[:id].to_guid%>');
      <%
      end # if row[:exported]
    end # rows.each
    %>

    // en endit any textfield inside a ul,
    // enable/disable the add button depending on the value of the textfield
    // by calling function enable_add_button(id_lead)
    $('ul.ul-export-lists').on('keyup', 'input.input-export-lists', function() {
      enable_add_button($(this).closest('ul').data('id-lead'));
    });

    // better user experience: when click on any export button, 
    // 1. disable the textfield
    // 2. disable the add button
    // 3. set '<center><i>Loading...</i></center>' as innerhtml of the div
    // 4. call ajax to bring the full list of export lists, and wich are linked to this lead
    // 5. add the export lists to the div.div-export-lists
    // 6. enable the textfield 
    // 7. call function to enable/disable the add button depending on the value of the textfield
    // 8. set focus on the textfield
    $('button.btn-export-lists').click(function() {
      let id_lead = $(this).data('id-lead');
      let div = document.querySelector('div.div-export-lists[data-id-lead="'+id_lead+'"]');
      // 1. disable the textfield
      $('ul.ul-export-lists[data-id-lead="'+id_lead+'"] input.input-export-lists').prop('disabled', true);
      // 2. disable the add button
      $('ul.ul-export-lists[data-id-lead="'+id_lead+'"] button.btn-create-export-list').prop('disabled', true);
      // 3. set '<center><i>Loading...</i></center>' as innerhtml of the div
      div.innerHTML = '<center><i>Loading...</i></center>';
      // 4. call ajax to bring the full list of export lists, and wich are linked to this lead
      $.ajax({
        url: '/ajax/leads/get_lists_linked_to_lead.json',
        type: 'POST',
        data: { id_lead: id_lead, name: name },
        success: function(data) {
          // get the json response
          let response = JSON.parse(data);
          if (response.status == 'success') {
            // 5. add the export lists to the div.div-export-lists          
            // remove all the lists
            div.innerHTML = '';
            response.exports.forEach(function(h) { 
              add_export_list(id_lead, h);
            });
            // if there are no exports to show, show a message
            if (response.exports.length == 0) {
              // find the div
              let div = document.querySelector('div.div-export-lists[data-id-lead="'+id_lead+'"]');
              // create the li element, with hand cursor
              let li = document.createElement('li');
              let center = document.createElement('center');
              let i = document.createElement('i');
              i.innerHTML = 'No export lists found';
              center.appendChild(i);
              li.appendChild(center);
              // add the li to the ul
              $(div).append(li);          
            }
            // 6. enable the textfield 
            $('ul.ul-export-lists[data-id-lead="'+id_lead+'"] input.input-export-lists').prop('disabled', false);
            // 7. call function to enable/disable the add button depending on the value of the textfield
            enable_add_button(id_lead);
            // 8. set focus on the textfield
            // becuase of any other javascript conflic, I have to  add a delay of 100ms before focus the inputbox.
            setTimeout(function() {
              $('ul.ul-export-lists[data-id-lead="'+id_lead+'"] li input.input-export-lists').focus();
            }, 100);      
          } else {
            alert(response.status);
            alert('An error occured trying to load the export lists. Error: ' + response.status);
          }
        }, error: function(data) {
          // get the json response
          let response = JSON.parse(data);
          alert('Unknown error occured when loading the export lists.');
        }
      });
    });  

    // better user experience: when click on the '+ add' button, 
    // 1. call AJAX to create the new list
    // 2. add the new list to all the export list dropdown
    // 3. delete the content of the input box
    $('button.btn-create-export-list').click(function(e) {
      // variables
      let name = $(this).parent().find('input.input-export-lists').val();
      let id_lead = $(this).data('id-lead');
      // 1. call AJAX to create the new list
      $.ajax({
        url: '/ajax/leads/create_export_list_and_add_lead.json',
        type: 'POST',
        data: { id_lead: id_lead, name: name },
        success: function(data) {
          // get the json response
          let response = JSON.parse(data);
          if (response.status == 'success') {
            // remove the dummy li now that I received the ID of the new export list.
            remove_export_list(id_lead, '123');
            // 2. add the new list to this the export list dropdown
            add_export_list(id_lead, {id: response.id_export, filename: name, belonging: true});
            // update the credits in the header
            i2p_update_header('leads');
          } else {
            if ( response.status =~ /No Credits/ ) {
              window.location.replace('/leads/plans');
            } else {
              alert('An error occured while creating the new list:' + name + '. Error: ' + response.status);
            }
          }
        },
        error: function(data) {
          alert('Unknown error occured while creating the new list:' + name);
        }
      });
      // better user experience: unlock data immedaitelly after the ajax call. don't wait for response because of an ux matter. 
      // unlock contact info
      unlock_data(id_lead);
      // better user experience: the new list is added immedaitelly after the ajax call. don't wait for response because of an ux matter. 
      // so I add a dummy li until I receive the ID of the new export list.
      add_export_list(id_lead, {id: '123', filename: name, belonging: true}, '0.5');
      // 3. delete the content of the input box belinging the parent ul element
      $('input.input-export-lists[data-id-lead="'+id_lead+'"]').val('');
      // JavaScript, stop additional event listeners
      // reference: https://www.w3schools.com/jsref/event_stopimmediatepropagation.asp
      e.stopImmediatePropagation();
    });

    // avoid to close the ul when click on the input box
    $('input.input-export-lists').click(function(e) {
      // JavaScript, stop additional event listeners
      // reference: https://www.w3schools.com/jsref/event_stopimmediatepropagation.asp
      e.stopImmediatePropagation();
    });

    // better user experience: when press ENTER on any .input-export-lists, for click on the add button with same data-id-lead.
    $('input.input-export-lists').keypress(function(e) {
      if (e.which == 13) {
        // find button .btn-create-export-list with same data-id-lead value
        let id_lead = $(this).attr('data-id-lead');
        let button = $('button.btn-create-export-list[data-id-lead="'+id_lead+'"]');
        // if button is enabled
        if ( button.prop('disabled') == false ) {
          // click the button
          button.click();
        }
      }
    });

    // draw filters
    filtersJs.draw(positions, {
      label: 'Positions',
      allowed_positive_keywords: true, // default value: true
      allowed_negative_keywords: true, // default value: false
      // catch event: update hidden textfield when filter is changed    
      on_add_value: function (value) {
        update_hidden_fields();
      },
      // catch event: update hidden textfield when filter is changed    
      on_remove_value: function (value) {
        update_hidden_fields();
      },
    });

    filtersJs.draw(industries, {
      label: 'Industries',
      allowed_positive_keywords: true, // default value: true
      allowed_negative_keywords: true, // default value: false
      allowed_values: ['<%=Leads::FlIndustry.order(:name).all.map { |o| o.name.encode_html }.join("', '")%>'],      
      // catch event: update hidden textfield when filter is changed    
      on_add_value: function (value) {
        update_hidden_fields();
      },
      // catch event: update hidden textfield when filter is changed    
      on_remove_value: function (value) {
        update_hidden_fields();
      },
    });

    filtersJs.draw(locations, {
      label: 'Locations',
      allowed_positive_keywords: true, // default value: true
      allowed_negative_keywords: true, // default value: false
      // catch event: update hidden textfield when filter is changed    
      on_add_value: function (value) {
        update_hidden_fields();
      },
      // catch event: update hidden textfield when filter is changed    
      on_remove_value: function (value) {
        update_hidden_fields();
      },
    });

    // add filters
    <%
    s.positions.each { |p| 
      %>
      filtersJs.addValue(positions, '<%=p.value.encode_html%>', <%=p.positive ? 'true' : 'false' %>)
      <%
    }

    s.industries.each { |i|
      %>
      filtersJs.addValue(industries, '<%=i.fl_industry.name.encode_html%>', <%=i.positive ? 'true' : 'false' %>)
      <%
    }

    s.locations.each { |l|
      %>
      filtersJs.addValue(locations, '<%=l.value.encode_html%>', <%=l.positive ? 'true' : 'false' %>)
      <%
    }
    %>
    
    // modals
    $('.save_modal').hide();
    $('.export_leads').hide();
    $('#inputName').on('input', function() {
      if($(this).val() !== '') {
        $('#f_positive_positions').val($('#positive_positions').val())
        $('#f_positive_locations').val($('#positive_locations').val())
        $('#f_positive_industries').val($('#positive_industries').val())
        $('#f_negative_positions').val($('#negative_positions').val())
        $('#f_negative_locations').val($('#negative_locations').val())
        $('#f_negative_industries').val($('#negative_industries').val())
        $('#save-search').removeAttr('disabled');
      } else {
        $('#save-search').attr('disabled', 'disabled');
      }
    });
    $('#file_name').on('input', function(){
      if(validate_export_modal()){
        $('#save-export').removeAttr('disabled');
      }
      else{
        $('#save-export').attr('disabled', 'disabled');
      }
    });
    $('#export_checkbox').on('change', function(){
      if(validate_export_modal()){
        $('#save-export').removeAttr('disabled');
      }
      else{
        $('#save-export').attr('disabled', 'disabled');
      }
    });
    $('#no_of_contacts').on('input', function(){
      if(validate_export_modal()){
        $('#save-export').removeAttr('disabled');
      }
      else{
        $('#save-export').attr('disabled', 'disabled');
      }
    });
  }); // $(document).ready

  $('#reset-filters').on('click', function () {
    window.location.reload();
  });
  
  function validate_export_modal(){
    $('#e-position').val($('#positive_positions').val())
    $('#e-location').val($('#positive_locations').val())
    $('#e-industry').val($('#positive_industries').val())
    $('#export_only').val($("#export_checkbox").is(':checked'))

    if ($('#file_name').val() !== '') {
      if( $("#export_checkbox").is(':checked')  && $('#no_of_contacts').val() !== ''){
        return true;
      }
      else return !$("#export_checkbox").is(':checked');
    } else {
      return false;
    }
  };
</script>
