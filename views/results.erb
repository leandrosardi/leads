<!--#include virtual = "./lgi/commons.asp"-->

<%
  login = BlackStack::Login.where(:id=>session['login.id']).first
  if (login == nil)
    # libero recursos
    DB.disconnect
    GC.start
    redirect_adapted_to_nginx CS_LOGIN_PAGE
  end
  DB.disconnect
  GC.start

  err = params[:err]
  msg = params[:msg]
  pid = params[:pid]
  page_size = 10
  max_pages = 20
  user = BlackStack::User.where(:id=>login.id_user).first
  id_client = user.id_client
  client = BlackStack::Client.where(:id=>id_client).first
  crmlists = Array.new()
  BlackStack::User.where(:id_client=>id_client).all { |u|
    CrmList.where(:id_user=>u.id).all { |l|
      crmlists << l
    }
  }

  balance = BlackStack::Balance.new(client.id, PRODUCT_FLD)


  step = params[:step]
  if (step==nil)
    step = "1"
  end

  page = params[:page]
  if (page==nil)
    page = "1"
  end

  order_column = params[:order_column]
  order_desc = params[:order_desc]
  id_search = params[:id_search]

  # valido que la busqueda pertenezca a este usuario
  if ( id_search != nil )
    q =
        "SELECT TOP 1 s.id AS sid " +
            "FROM [user] u " +
            "JOIN search s ON u.id=s.id_user " +
            "WHERE u.id_client='#{id_client}' " +
            "AND s.id='#{id_search}'"
    row = DB[q].first
    if (row==nil)
      DB.disconnect
      GC.start
      redirect_adapted_to_nginx getDivisionURL + "/edb/searches?err=#{ERR_RESULTS_SEARCH_BAD_GUID.to_s}"
    end
  end

  # mensajes a mostrar en pantalla
  err = ""
  msg = ""

  # obtengo los filtros configurados
  filters = []
  n = params[:n].to_i
  i = 1
  if (n==nil)
    n=0
  end
  while (i<=n)
    filters << {:field=>params["field#{i.to_s}".to_sym], :value=>params["value#{i.to_s}".to_sym], :positive=>params["positive#{i.to_s}".to_sym]}
    i+=1
  end

  # obtengo el id de la busqueda creada/asignada
  sid = params[:sid]
  sname = params[:sname]

  # accion requerida por el usuario
  action = params[:action]

  # STEP 1: campos relacionados a los filtros
  field = params[:field]
  value = params[:value]
  positive = params[:positive]
  phones = params[:phones]
  addresses = params[:addresses]

  # STEP 2: campos relacionados a la creacion de busqueda
  sname = params[:sname] # al crear una busqueda nueva, se debe ingresar un nombre

  # STEP 3: generar el job de exportacion
  export_to_crm = params[:export_to_crm]
  export_to_em = params[:export_to_em]
  exportresults = params[:exportresults]

  if (action.to_s=='add_filter')
    if (field.to_s.size>0 && value.to_s.size>0)
      if (positive.to_s.size==0)
        positive = "yes"
      end

      # no se permite mas de un filtro por industria
      # no se permite mas de un filtro por localidad
      if (field=='industry' || field=='location')
        filters.delete_if { |h| h[:field] == field.to_s }
      else
        filters.delete_if { |h| h[:field] == field.to_s && h[:value] == value.to_s }
      end

      filters << {:field=>field.to_s, :value=>value.to_s, :positive=>positive.to_s}

      # reseteo los valores sid y sname, porque ante un cambio en los filtros debo crear una nueva busqueda
      sid = nil
      sname = nil
    end

  elsif (action.to_s=='remove_filter')
    if (field.to_s.size>0 && value.to_s.size>0)
      filters.delete_if { |h| (h[:field] == field.to_s && h[:value] == value.to_s) }

      # reseteo los valores sid y sname, porque ante un cambio en los filtros debo crear una nueva busqueda
      sid = nil
      sname = nil
    end

  elsif (action.to_s=='require_phones')
    phones = "yes"
  elsif (action.to_s=='dont_require_phones')
    phones = "no"
  elsif (action.to_s=='require_addresses')
    addresses = "yes"
  elsif (action.to_s=='dont_require_addresses')
    addresses = "no"
  elsif (action.to_s=='gotostep1')
    step = "1"
  elsif (action.to_s=='gotostep2')
    step = "2"
  elsif (action.to_s=='gotostep3')
    step = "3"
  elsif (action.to_s=='createsearch')
    if (sname.to_s.size == 0)
      err = "Search name is mandatory."
    else
      sid = guid()

      # creo la busqueda
      DB.transaction do
        # creo el objeto
        s = BlackStack::Search.new()
        s.id = sid
        s.name = sname
        s.id_user = login.user.id

        filters.each { |filter|
          if ( filter[:field] == 'industry' )
            s.lnindustry = BlackStack::LnIndustry.where(:name=>filter[:value]).first
            break
          end
        }

        filters.each { |filter|
          if ( filter[:field] == 'location' )
            l = BlackStack::LnLocation.where(:name=>filter[:value]).first
            s.lnlocation = l
            if (l!=nil)
              s.lncountry = l.lncountry
            end
            break
          end
        }

        s.create_time = now()
        s.status = 1
        s.save()

        # proceso los keyword
        filters.each { |filter|
          if ( filter[:field] == 'position' )
            k = BlackStack::SearchKeyword.new()
            k.id = guid()
            k.id_search = s.id
            k.keyword = filter[:value]
            k.apply_to_whole_profile = 0
            k.apply_to_current_job_title = 1
            k.apply_to_past_job_title = 0
            k.apply_to_current_company_name = 0
            k.apply_to_past_company_name = 0

            if (filter[:positive] == "yes")
              k.is_negative = 0
            else
              k.is_negative = 1
            end

            k.save()
          end
        }
      end # transaction

      # voy al siguiente paso
      step = "3"
    end

  elsif (action.to_s=='choosesearch')
    if (sid.to_s.size == 0)
      err = "Search id is mandatory."
    else
      # actualizo la variable sname
      sname = BlackStack::Search.where(:id=>sid).first.name

      # voy al siguiente paso
      step = "3"
    end

  elsif (action.to_s=="exportresults")
    jid = guid()
    lid = nil # id de emlist
    mid = nil # id de crmlist
    value_id_emlist = nil
    value_id_crmlist = nil
    sname = DB["SELECT name FROM search WHERE id='#{sid}'"].first[:name]
    lid = DB["SELECT id_emlist FROM search WHERE id='#{sid}'"].first[:id_emlist]
    mid = DB["SELECT id_crmlist FROM search WHERE id='#{sid}'"].first[:id_crmlist]

    # si debo crear una lista de email para esta busqueda
    if (export_to_em.to_s.size>0)
      if (lid==nil)
        lid = guid()
        q =
            "INSERT INTO emlist " +
                "(id, create_time, name, reminder, id_user, contact_information) " +
                "VALUES " +
                "('#{lid}', GETDATE(), '#{sname.to_s.gsub("'","''")}', 'n/a', '#{login.user.id}', 'n/a')" # TODO: tomar remindar y contact_infromation del perfil del usuario
        DB.execute(q)

        # agrego los merge-tags
        q =
            "INSERT INTO emfielddef " +
                "(id, id_emlist, create_time, [name]) " +
                "VALUES " +
                "(NEWID(), '#{lid}', GETDATE(), 'FNAME')"
        DB.execute(q)

        q =
            "INSERT INTO emfielddef " +
                "(id, id_emlist, create_time, [name]) " +
                "VALUES " +
                "(NEWID(), '#{lid}', GETDATE(), 'CNAME')"
        DB.execute(q)
      end
      # vinculo la busqueda a este objeto
      DB.execute("UPDATE search SET id_emlist='#{lid}' WHERE id='#{sid}'")
    else
      # vinculo la busqueda a este objeto
      DB.execute("UPDATE search SET id_emlist=null WHERE id='#{sid}'")
    end

    # si debo crear una lista CRM para esta busqueda
    if (export_to_crm.to_s.size>0)
      if (mid == nil)
        mid = guid()
        # creo el objeto
        l = CrmList.new()
        l.id = mid
        l.id_user = login.user.id
        l.create_time = now()
        l.name = sname
        l.save()
      end
      # vinculo la busqueda a este objeto
      DB.execute("UPDATE search SET id_crmlist='#{mid}' WHERE id='#{sid}'")
    else
      # vinculo la busqueda a este objeto
      DB.execute("UPDATE search SET id_crmlist=null WHERE id='#{sid}'")
    end

    if (export_to_em.to_s.size>0 || export_to_crm.to_s.size>0)
      msg = "The search is linked to the export list. New results will be exported there after verification."
    end
  end

  # armo la url
  url = ""
  nFilter=0
  filters.each { |filter|
    nFilter+=1
    url += "field#{nFilter.to_s}=#{filter[:field].to_s}&value#{nFilter.to_s}=#{filter[:value].to_s}&positive#{nFilter.to_s}=#{filter[:positive].to_s}&"
  }
  if (id_search.to_s.size>0)
    url+="id_search=#{id_search.to_guid}&"
  end
  if (phones.to_s=='yes')
    url+="phones=yes&"
  end
  if (addresses.to_s=='yes')
    url+="addresses=yes&"
  end
  url += "n=#{nFilter.to_s}&"

  if (sid.to_s.size>0)
    url+="sid=#{sid.to_guid}&"
  end
  if (sname.to_s.size>0)
    url+="sname=#{sname.to_guid}&"
  end

  url = "./results?" + URI.escape(url)

  #
  if (field.to_s.size==0)
#	  	field='any'
    field='position'
  end

  page = params[:page]
  remove_search_filter = params[:remove_search_filter]

  if (order_column.to_s.length==0)
    order_column = session['searches.results.order_column']
  else
    session['searches.results.order_column'] = order_column
  end

  if (order_desc.to_s.length==0)
    order_desc = session['searches.results.order_desc']
  else
    session['searches.results.order_desc'] = order_desc
  end

  if (order_desc == "1")
    next_order_desc = "0"
  else
    next_order_desc = "1"
  end

  if ( remove_search_filter!=nil )
    id_search = nil
    session['searches.results.id_search'] = id_search
  end

  # si el id_search es diferente a la anterior,
  # => debo volver a la pagina 1
  if (session['searches.results.id_search'].to_s != id_search.to_s)
    page="1"
    session['searches.results.id_search'] = id_search.to_s
  end
  session['searches.results.id_search'] = id_search

  if (field==nil)
    field = session['searches.results.field']
    if (field==nil)
      field="name"
    end
  else
    # si el field es diferente a la anterior,
    # => debo volver a la pagina 1
    if (session['searches.results.field'].to_s != field.to_s)
      page="1"
    end
    session['searches.results.field'] = field
  end

  if (value==nil)
    value = session['searches.results.value']
    if (value==nil)
      value=""
    end
  else
    # si la value es diferente a la anterior,
    # => debo volver a la pagina 1
    if (session['searches.results.value'].to_s != value.to_s)
      page="1"
    end
    session['searches.results.value'] = value
  end

  if (page==nil)
    page = session['searches.results.page']
    if (page==nil)
      page=1
    end
  else
    session['searches.results.page'] = page
  end

  # decido el id del elemento sobre el que debo poner el foco
  focus = "position"
  if (filters.select {|filter| filter[:field]=='industry'}.size > 0)
    focus = "industry"
  end
  if (filters.select {|filter| filter[:field]=='location'}.size > 0)
    focus = "location"
  end
%>

<style>
  .loading-container {
    position: fixed;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: white;
    opacity: 0.5;
    text-align: center;
    padding-top: 45vh;
    display: none;
    z-index: 9999;
  }
</style>

<script type="text/javascript">
    function newHttpRequest() {
        var xmlhttp;
        if (window.XMLHttpRequest) {
            // code for IE7+, Firefox, Chrome, Opera, Safari
            xmlhttp = new XMLHttpRequest();
        } else {
            // code for IE6, IE5
            xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
        }

        return xmlhttp;
    }

    function newXmlParser(txt) {
        if (window.DOMParser) {
            parser = new DOMParser();
            xmlDoc = parser.parseFromString(txt, "text/xml");
        } else// Internet Explorer
        {
            xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
            xmlDoc.async = false;
            xmlDoc.loadXML(txt);
        }

        return xmlDoc
    }

    function addEvent(element, eventName, fn) {
        if (element.addEventListener)
            element.addEventListener(eventName, fn, false);
        else if (element.attachEvent)
            element.attachEvent('on' + eventName, fn);
    }

    $(document).ready(function() {
        /*
        $(".appear_on_mouse_over").css({ 'opacity' : 0.2 }) ;
        */
    });

    function onTicketMouseOver(o) {
        /*
        $(".appear_on_mouse_over", $(o)).css({ 'opacity' : 1.0 })
        */
    }

    function onTicketMouseOut(o) {
        /*
        $(".appear_on_mouse_over", $(o)).css({ 'opacity' : 0.2 })
        */
    }

    function exportSubscriber(pid, lid) {
        spanEmails = $('#emails-'+pid)
        spanEmails.text("exporting...")
        $(".get-email-"+pid).addClass("disabled");
        $.ajax({url: '<%=getBackendSinatraURL%>/api1.3/edb/export_result_to_em.json',
            data: {
                api_key: '<%=BlackStack::Pampa::api_key%>',
                id_user: '<%= user.id%>',
                id_profile: pid,
                id_emlist: lid,
            },
            success: function(data) {
                res = JSON.parse(data);

                // $('.loading-container').hide();
                if (res.status == 'success') {
                    label = $('#label-'+pid) // el label al costado del boton de exportacion, que indica la cantidad de listas deonde existe el lead
                    listName = $('#listname-'+lid+'-'+pid)
                    listLabel = $('#listlabel-'+lid+'-'+pid)

                    //			nLists = label.text().replace(/(^\d+)(.+$)/i,'$1');
                    //			nLists = Number(nLists) + 1;
                    //			label.text(nLists.toString() + " lists")
                    label.text("exported");
                    label.removeClass('label-orange');
                    label.addClass('label-green');

                    listLabel.text("already there")
                    listLabel.removeClass('label-green');
                    listLabel.addClass('label-red');
                    listName.css('color','gray');
                    listName.removeAttr("href");

                    spanEmails.text("done!");
                    $(".get-email-"+pid).removeClass("disabled");
                    // $('#add-movement-modal').modal('hide');
                    // $('.btn-filter').click();
                } else {
                    // $('#add-movement-modal .movement-error').text(res.message || res.status.substring(0, 200));
                    spanEmails.text(res.status);
                    $(".get-email-"+pid).removeClass("disabled");
                }

            }, error: function(data) {
                spanEmails.text("communication error");
                /*
                $('.loading-container').hide();
                $('#add-movement-modal .movement-error').text('Failed to connect server');

                */
            }});

        $('.loading-container').hide();
    }

    function exportLead(pid, lid)
    {
        spanEmails = $('#emails-'+pid)

        spanEmails.text("loading...")

        $(".get-email-"+pid).addClass("disabled");

        $.ajax({url: '<%=getBackendSinatraURL%>/api1.3/edb/export_result_to_crm.json',
            data: {
                api_key: '<%=BlackStack::Pampa::api_key %>',
                id_user: '<%=user.id%>',
                id_profile: pid,
                id_crmlist: lid,
            },
            success: function(data) {
                res = JSON.parse(data);

                //			$('.loading-container').hide();
                if (res.status == 'success') {
                    creditsLabel = $('#credits')
                    listName = $('#listname-'+lid+'-'+pid)
                    numberOfListsExported = $('#number-of-lists-exported-'+pid)
                    allListNames = $("[id^=listname-"+lid+"]")

                    nCredits = creditsLabel.text().replace(/(^\d+)(.+$)/i,'$1');

                    if (Number(numberOfListsExported.val()) == 0) {
                        nCredits = Number(nCredits) - 1;
                    }

                    numberOfListsExported.val( (Number(numberOfListsExported.val())+1).toString() );

                    creditsLabel.text(nCredits.toString() + " Credits")

                    if (nCredits<=0) {
                        allListNames.css('color','gray');
                        allListNames.removeAttr("href");
                    }

                    listName.css('color','gray');
                    listName.removeAttr("href");

                    spanEmails.text("");
                    for (var i = 0; i < res.emails.length; i++) {
                        spanEmails.append('<i class="icon-envelope"></i> '+res.emails[i]+'<br/>');
                    }
                    for (var i = 0; i < res.phones.length; i++) {
                        spanEmails.append('<i class="icon-mobile-phone"></i> '+res.phones[i]+'<br/>');
                    }
                    for (var i = 0; i < res.social_profiles.length; i++) {
                        data = res.social_profiles[i];
                        spanEmails.append('<i class="'+data.icon+'"></i> '+data.value+'<br/>');
                    }
                    for (var j = 0; j < res.company_data.length; j++) {
                        data = res.company_data[j];
                        spanEmails.append('<i class="'+data.icon+'"></i>'+data.value+' <span style="color:gray;font-size=8pt">('+data.company_name+')</span><br/>');
                    }

                    $(".get-email-"+pid).removeClass("disabled");
                    //$('#add-movement-modal').modal('hide');
                    //$('.btn-filter').click();
                } else {
                    alert(res.status);
                    //$('#add-movement-modal .movement-error').text(res.message || res.status.substring(0, 200));
                }

            }, error: function(data) {
                /*
                $('.loading-container').hide();
                $('#add-movement-modal .movement-error').text('Failed to connect server');
                */
            }});

        $('.loading-container').hide();
    } // function exportLead

</script>

<div class="loading-container"></div>

<!-- Page content
================================================== -->
<section class="row-fluid">

  <section class="row-fluid">
    <div class='span6'>
      <h1>Leads <i class="icon-chevron-right"></i> Results </h1>
    </div>
    <div class='span6' align='right' valign='middle'>
      <button class='btn btn-green btn-large disabled' id='credits' name='credits'><%=(-balance.credits.to_i).to_s%> Credits</button><br/>
      <a class='btn btn-link btn-medium' href='../settings/credit'>buy more credits</a>
    </div>
  </section>

  <br/>

  <section class='row-fluid'>
    <section class="span3 box">
      <form action='<%=getDivisionURL%>/edb/results' method="get" id='formWizard' name='formWizard'>

        <div class='form-horizontal span12'>

          <%
            if (step != "1")
              visibility = "hidden"
              height = "0px"

              if (filters.size == 0)
                color='gray'
              else
                color='green'
              end
          %>
            <h4><span class="badge badge-<%=color%>">1</span> Add Filters <button class='gotostep1 btn btn-small btn-link'> open <i class='icon-caret-down'></i></button></h4>
          <%
            else
              visibility = "visible"
              height = "auto"
          %>
            <h4><span class="badge badge-blue">1</span> Add Filters</h4>
          <%
            end
          %>

          <div style='visibility:<%=visibility%>;height:<%=height%>'>
            <%
              if (id_search.to_s.size>0)
            %>
              <input type='hidden' id='id_search' name='id_search' value='<%=id_search.to_s.to_guid%>'>
            <%
              end

              if (phones.to_s=='yes')
            %>
              <input type='hidden' id='phones' name='phones' value='yes'>
            <%
              end

              if (addresses.to_s=='yes')
            %>
              <input type='hidden' id='addresses' name='addresses' value='yes'>
            <%
              end

              nFilter=0
              filters.each { |filter|
                nFilter+=1
            %>
              <input type='hidden' id='field<%=nFilter.to_s%>' name='field<%=nFilter.to_s%>' value='<%=filter[:field].to_s%>'>
              <input type='hidden' id='value<%=nFilter.to_s%>' name='value<%=nFilter.to_s%>' value='<%=filter[:value].to_s%>'>
              <input type='hidden' id='positive<%=nFilter.to_s%>' name='positive<%=nFilter.to_s%>' value='<%=filter[:positive].to_s%>'>

            <%
              }
            %>

            <input type='hidden' id='sid' name='sid' value='<%=sid.to_s%>'>
            <input type='hidden' id='sname' name='sname' value='<%=sname.to_s%>'>
            <input type='hidden' id='step' name='step' value='<%=step.to_s%>'>
            <input type='hidden' id='n' name='n' value='<%=filters.size.to_s%>'>
            <input type='hidden' id='field' name='field' value='name'>
            <input type='hidden' id='value' name='value' value=''>
            <input type='hidden' id='positive' name='positive' value='yes'>
            <input type='hidden' id='action' name='action' value='add_filter'>

            <fieldset>

              <label>Position</label>
              <input type='text' id='position' name='position' value='' onfocus='this.select();'>
              <!--
              <span class="help-block"></span>
              -->
              <div class='row-fluid'>
                <button class="btn btn-mini btn-blue" type="button" onclick='addFilter("position", $("#position").val(), true);'><i class="icon-plus"></i> Include</button>
                <button class="btn btn-mini btn-red" type="button" onclick='addFilter("position", $("#position").val(), false);'><i class="icon-minus"></i> Exclude</button>
              </div>
              <br/>

              <%
                # esta seccion se muestra minimizada, a menos que ya se haya cargado algun job position
                if ( step=="1" && filters.select { |filter| filter[:field] == 'position' }.size > 0 )
                  visibility = 'visible'
                  height = 'auto'
                  command = 'hide'
                else
                  visibility = 'hidden'
                  height = '0px'
                  command = 'show'
                end

                filterIndustry = filters.select { |filter| filter[:field] == 'industry' }.first
                value_industry = nil
                if (filterIndustry!=nil)
                  value_industry = filterIndustry[:value]
                end
              %>
              <div class='row-fluid'>
                <div class='span6'>
                  <label>Industry</label>
                </div>
                <div class='span5' align='right'>
                  <a class='btn btn-link btn-small' id='show_industry_filter_panel' name='show_industry_filter_panel' href='#'><%=command%> <i class='icon-caret-down'></i></a>
                </div>
                <div class='span1' align='right'></div>
              </div>
              <div class='row-fluid' id='industry_filter_panel' name='industry_filter_panel' style='visibility: <%=visibility%>; height: <%=height%>;'>
                <input type='text' value='<%=value_industry.to_s.gsub("'","&apos;")%>' class='awesomplete' list="industry_list" id='industry' name='industry' onfocus='this.select();'>
                <datalist id="industry_list">
                  <%
                    BlackStack::LnIndustry.order(:name).all { |o|
                      #							if s.id_lnindustry == o.id
                      #								sSelected = "selected"
                      #							else
                      sSelected = ""
                      #							end
                  %>
                    <option <%=sSelected%>><%=o.name%></option>
                  <%
                    }
                  %>
                </datalist>
                <!--
                <span class="help-block"></span>
                -->
                <br/>
                <div class='row-fluid'>
                  <button class="btn btn-mini btn-blue" type="button" onclick='addFilter("industry", $("#industry").val(), true);'><i class="icon-ok"></i> Apply</button>
                  <!--
                  <button class="btn btn-mini btn-red" type="button" onclick='addFilter("industry", $("#industry").val(), false);'><i class="icon-minus"></i> Exclude</button>
                  -->
                </div>
                <br/>
              </div>


              <%
                # esta seccion se muestra minimizada, a menos que ya se haya cargado algun industry
                if ( step=="1" && filters.select { |filter| filter[:field] == 'industry' }.size > 0 )
                  visibility = 'visible'
                  height = 'auto'
                  command = 'hide'
                else
                  visibility = 'hidden'
                  height = '0px'
                  command = 'show'
                end

                filterLocation = filters.select { |filter| filter[:field] == 'location' }.first
                value_location = nil
                if (filterLocation!=nil)
                  value_location = filterLocation[:value]
                end
              %>
              <div class='row-fluid'>
                <div class='span6'>
                  <label>Location</label>
                </div>
                <div class='span5' align='right'>
                  <a class='btn btn-link btn-small' id='show_location_filter_panel' name='show_location_filter_panel' href='#'><%=command%> <i class='icon-caret-down'></i></a>
                </div>
                <div class='span1' align='right'></div>
              </div>

              <div class='row-fluid' id='location_filter_panel' name='location_filter_panel' style='visibility: <%=visibility%>; height: <%=height%>;'>
                <input type='text' value='<%=value_location.to_s.gsub("'","&apos;")%>' class='awesomplete' list="location_list" id='location' name='location' onfocus='this.select();'>
                <datalist id="location_list">
                  <%
                    BlackStack::LnLocation.where(:allowed_for_incrawl_lnsearchvariation=>true).order(:name).all { |o|
                      #if s.id_lnindustry == o.id
                      #	sSelected = "selected"
                      #else
                      sSelected = ""
                      #end
                  %>
                    <option <%=sSelected%>><%=o.name%></option>
                  <%
                    }
                  %>
                </datalist>
                <!--
                <span class="help-block"></span>
                -->
                <br/>
                <div class='row-fluid'>
                  <button class="btn btn-mini btn-blue" type="button" onclick='addFilter("location", $("#location").val(), true);'><i class="icon-ok"></i> Apply</button>
                  <!--
                  <button class="btn btn-mini btn-red" type="button" onclick='addFilter("location", $("#location").val(), false);'><i class="icon-minus"></i> Exclude</button>
                  -->
                </div>
                <br/>

              </div>

              <div class='row-fluid'>
                <div class='span11' align='right'>
                  <button class="btn btn-medium btn-blue input-append gotostep2" value="Add Filters" id='gotostep2' name='gotostep2'>Next</button>
                </div>
              </div>
          </div>

          </fieldset>

          <%
            if (step != "2")
              visibility = "hidden"
              height = "0"

              if (sid.to_s.size > 0)
                color = "green"
              else
                color = "gray"
              end
          %>
            <h4><span class="badge badge-<%=color%>">2</span> Create Saved Search <button class='gotostep2 btn btn-link btn-small'> open <i class='icon-caret-down'></i></button></h4>
          <%
            else
              visibility = "visible"
              height = "auto"
          %>
            <h4><span class="badge badge-blue">2</span> Create Saved Search</h4>
          <%
            end
          %>

          <div style='visibility:<%=visibility%>;height:<%=height%>'>
            <fieldset>
              <%
                if (sid.to_s.size>0)
                  s = BlackStack::Search.where(:id=>sid).first
                  sname = s.name
                  if (s.name.to_s.size==0)
                    sname = "<i>no name assigned</i>"
                  end
              %>
                <div class='row-fluid'>
                  <span><b>Chosen Search:</b> <span class='text-info'><%=sname.to_s.gsub("'","&apos;")%></span></span>
                  <br/>
                  <br/>
                </div>
              <%
                end
              %>

              <div class='row-fluid'>
                <label>New Search Name <a rel="tooltip" data-original-title="Allocate these results in a saved search, and receive notifications when we find new leads for it." class="icon-info-sign" style="text-decoration: none;"></a></label>
                <input type='text' value='' placeholder="Write a descriptive name here." id='sname' name='sname'>
              </div>
              <div class='row-fluid'>
                <div class='span12' align='right'>
                  <button class="gotostep1 btn btn-medium btn-link btn-blue input-append" value="Add Filters">Back</button>
                  <button class="createsearch btn btn-medium btn-blue input-append" value="Add Filters">Create</button>
                  <%
                    if (sid.to_s.size > 0)
                  %>
                    <button class="gotostep3 btn btn-medium btn-link btn-blue input-append" value="Add Filters">Next</button>
                  <%
                    end
                  %>

                </div>
                <!--
                <div class='span1' align='right'></div>
                -->
              </div>

              <%
                if (false) # TODO: NOTAR QUE LOS FILTROS APLICADOS PUEDEN NO COINCIDIR CON LA BUSQUEDA SELECCIONADA
                  q =
                      "SELECT s.id AS sid, s.name AS sname, ISNULL(s.status,0) status " +
                          "FROM search s WITH (NOLOCK) " +
                          "JOIN [user] u WITH (NOLOCK) ON u.id=s.id_user " +
                          "WHERE u.id_client='#{id_client}' " +
                          "AND s.delete_time IS NULL "

                  if ( DB[q].count() > 0 )
              %>
                  <br/>
                  <span class="help-block">Or choose an existing search:</span>

                  <%
                    DB[q].all { |row|
                      the_sid = row[:sid]
                      the_sname = row[:sname]
                      if (the_sname.to_s.size == 0)
                        the_sname = "<i>no name assigned</i>"
                      end
                  %>
                    <div class='row-fluid'>
                      <button class='choosesearch btn-link btn-small' value='<%=the_sid%>'><%=the_sname%></button>
                      <a href='../listbuilder/search/<%=the_sid%>' target='_window' tooltip='view this search'><i class='icon-folder-open'></i></a>
                    </div>
                  <%
                    }
                    end
                    end # false
                  %>
            </fieldset>
          </div>

          <%
            header_text = "Setup Exports"
            if (step != "3" || sid.to_s.size == 0)
              visibility = "hidden"
              height = "0"
          %>
            <h4>
              <span class="badge badge-gray">3</span> <%=header_text%>
              <%
                if (sid.to_s.size > 0) # este paso solo puede hacerse si ya se asigno una busqueda
              %>
                <button class='gotostep3 btn btn-link btn-small'> open <i class='icon-caret-down'></i></button>
              <%
                end
              %>
            </h4>
          <%
            else
              visibility = "visible"
              height = "auto"
          %>
            <h4><span class="badge badge-blue">3</span> <%=header_text%></h4>
          <%
            end
          %>
          <div style='visibility:<%=visibility%>;height:<%=height%>'>
            <fieldset>
              <%
                if (sid.to_s.size>0)
                  s = BlackStack::Search.where(:id=>sid).first
                  sname = s.name
                  if (s.name.to_s.size==0)
                    sname = "<i>no name assigned</i>"
                  end
              %>
                <div class='row-fluid'>
                  <span><b>Chosen Search:</b> <span class='text-info'><%=sname.to_s.gsub("'","&apos;")%></span></span>
                  <br/>
                  <br/>
                </div>
              <%
                end
              %>

              <b>What will you do with this search?</b>
              <br/>
              <br/>

              <label class='checkbox'>
                <%
                  checked = ""
                  if ( export_to_em.to_s.size > 0 )
                    checked = "checked"
                  end
                %>

                <input type='checkbox' id='export_to_em' name='export_to_em' <%=checked%>> <span>I want to send cold emails</span>
                <a rel="tooltip" data-original-title="Emails will be exported to the email list with no cost. You need message credits. If you want to see the email addresses, you have to export them to a CRM list." class="icon-info-sign" style="text-decoration: none;"></a>
              </label>
              <span class="help-block">You have <span style='color:blue'><%=(0-BlackStack::Balance.new(client.id, PRODUCT_SSM).credits).to_s%></span> email credits.<br/></span>
              <br/>

              <label class='checkbox'>
                <%
                  checked = ""
                  if ( export_to_crm.to_s.size > 0 )
                    checked = "checked"
                  end
                %>
                <input type='checkbox' id='export_to_crm' name='export_to_crm' <%=checked%>> <span>I want to download the data</span>
                <a rel="tooltip" data-original-title="We'll create a saved search for these filters" class="icon-info-sign" style="text-decoration: none;"></a>
              </label>
              <span class="help-block">You have <span style='color:blue'><%=(0-BlackStack::Balance.new(client.id, PRODUCT_FLD).credits).to_s%></span> data credits</span>
              <br/>

              <div class='row-fluid'>
                <div class='span11' align='right'>
                  <button class="gotostep2 btn btn-medium btn-link btn-blue input-append" value="Add Filters">Back</button>
                  <button class="exportresults btn btn-medium btn-blue input-append" value="Add Filters">Save</button>
                </div>
                <div class='span1'></div>
              </div>
            </fieldset>
          </div>
        </div>

      </form>
    </section>

    <section class="span9 box">

      <%
        if (id_search.to_s.size>0)
          sname = DB["SELECT name FROM search WHERE id='#{id_search}'"].first[:name]
          remove_url = url + URI.escape("&remove_search_filter=yes")
      %>
        <div class="btn-group">
          <button class="btn btn-blue btn-mini disabled">
            <b>search:</b> <%= sname%>
            remove_search_filter
          </button>
          <button class='btn btn-blue btn-mini' onclick="document.location='<%=remove_url.gsub("'","\'")%>'"><i class='icon-remove'></i></button>
        </div></td>
      <%
        end # if
      %>

      <%

        if (pid.to_s.size>0)
      %>
        <div class='btn-group'>
          <button class="btn btn-red btn-mini disabled"><b>pid:</b> <%=pid.to_s%></button>
          <button class='btn btn-red btn-mini' onclick="document.location='<%=url.gsub("'","\'")%>'"><i class='icon-remove'></i></button>
        </div>
      <%
        end

        filters.each { |filter|
          remove_url = url + URI.escape("&action=remove_filter&field=#{filter[:field].to_s}&value=#{filter[:value].to_s}")
          if (filter[:positive]=='yes')
            color='blue'
          else
            color='red'
          end
      %>
        <div class='btn-group'>
          <button class="btn btn-<%=color%> btn-mini disabled"><b><%=filter[:field]%>:</b> <%=filter[:value].to_s%></button>
          <button class='btn btn-<%=color%> btn-mini' onclick="document.location='<%=remove_url.gsub("'","\'")%>'"><i class='icon-remove'></i></button>
        </div>
      <%
        }
      %>

      <%
        ds = BlackStack::Search.dsCore(page_size*max_pages, id_search, pid, filters, addresses.to_s=="yes"?true:false, phones.to_s=="yes"?true:false, nil)
        ds = ds.extension(:pagination)
        ds = ds.paginate(page.to_i, page_size)
        results = ds.page_count.to_i * page_size
        pages = (results / page_size).to_i
        if (results<0)
          results=0
        end

        if (results==0)
      %>
        <div align='center' valign='top'>
          <br/>
          <br/>
          <i>No results yet, or the filter is too restrictive.</i>
          <br/>
          <br/>
        </div>
      <%
        else
      %>
        <div align='left' valign='top'>
          <%
            if (results >= max_pages*page_size)
          %>
            <b>Number of Results: <%=results.to_s%> or more.</b>
          <%
            else
          %>
            <b>Number of Results: from <%=(results-page_size).to_s%> to <%=(results).to_s%>.</b>
          <%
            end
          %>
          <br/>
          <br/>
        </div>
      <%
        end
      %>

      <%
        # matcheo el primer numero-letra del id con el array de colores
        # => nota: quiero asignar siempre al mismo color a cada lead,
        # => por eso no le limito a solo tomar un color al azar.
        aColors = ['blue','orange','green','cyan','red','black','pink']
        aChars = ('0'..'9').to_a + ('A'..'Z').to_a
      %>

      <div class="ticket row-fluid" onmouseover="onTicketMouseOver(this);" onmouseout="onTicketMouseOut(this);" valign='top'>
        <table width='100%'>
          <%
            ds.all { |row|
              DB.disconnect
              GC.start

              rid = row[:id_result]
              if (rid!=nil)
                rid=rid.to_guid.to_s
              end

              sname = row[:sname]
              if (sname != nil)
                sname = sname.to_s
              end

              pid = row[:pid].to_guid.to_s
              pname = row[:name].to_s.to_s
              phead = row[:headline].to_s.to_s
              ptitl = row[:title].to_s.to_s
              lname = row[:location].to_s.to_s
              iname = row[:industry].to_s.to_s
              first = pname.split(" ").first
              last = pname.split(" ").last

              # get the last verification time of this profile
              q2 =
                  "SELECT TOP 1 dbo.fnTimeAgoDescription(ISNULL(a.verify_end_time, a.create_time), getdate()) as timeago " +
                      "FROM append a WITH (NOLOCK INDEX(IX_append__id_profile__verify_end_time__verify_result__source_name)) " +
                      "WHERE a.id_profile = '#{pid}' " +
                      "AND ( (a.verify_end_time IS NOT NULL AND ISNULL(a.verify_result,0)=1) OR a.source_name='MailTesterBot' ) " +
                      "ORDER BY ISNULL(a.verify_end_time, a.create_time) DESC"
              rowTimeAgo = DB[q2].first

=begin
					row2 = DB[
					"SELECT year(min(a.create_time)) as allocation_year, month(min(a.create_time)) as allocation_month, day(min(a.create_time)) as allocation_day " +
					"FROM append a WITH (NOLOCK) " +
					"WHERE a.id_profile='#{pid}' "
					].first
=end

              ch = pid.upcase[1]
              nColor = aChars.index(ch) % aColors.size

              # obtengo las iniciales del	lead
              if (first.to_s.size>0 && last.to_s.size>0)
                signature = ""
                if ( first.to_s.upcase[0] =~ /[A-Za-z]/ )
                  signature = signature + first.to_s.upcase[0]
                end
                if ( last.to_s.upcase[0] =~ /[A-Za-z]/ )
                  signature = signature + last.to_s.upcase[0]
                end
              else
                signature = "--"
              end

              cname = ""
              cname1 = phead.scan(/ at (.*)$/).first
              cname2 = ptitl.scan(/ at (.*)$/).first
              if (cname1.to_s.size>0)
                cname = cname1[0].to_s
              end
              if (cname2.to_s.size>0)
                if (cname.to_s.size>0)
                  cname = cname.to_s + ", " + cname2[0].to_s
                else
                  cname = cname2[0].to_s
                end
              end

=begin
					p = BlackStack::Profile.where(:id=>pid).first
					c1 = Company.where(:id=>p.id_company_from_headline).first
					c2 = Company.where(:id=>p.id_company_from_title).first
					if (c1!=nil)
					if (c1.name.to_s.size>0)
					cname = cname + c1.name.to_s
					end
					end
					if (c2!=nil)
					if (c2.name.to_s.size>0 && c2.name.to_s!=cname.to_s)
					if (cname.to_s.size>0)
					cname = cname + ", "
					end
					cname = cname + c2.name.to_s
					end
					end
=end

=begin
					allocation_year = row2[:allocation_year].to_i
					allocation_month = row2[:allocation_month].to_i
					allocation_day = row2[:allocation_day].to_i
=end

              allocation_year = 1900
              allocation_month = 1
              allocation_day = 1

              # number of lists where this lead is included
              # TODO: ESTA CONSULTA ES PESADA. REEMPLAZAR POR CAMPO DE ESTADISTICAS
              q =
                  "SELECT COUNT(DISTINCT d.id) AS n " +
                      "FROM crmlead d WITH (NOLOCK) " +
                      "JOIN crmlist l WITH (NOLOCK) ON l.id=d.id_crmlist " +
                      "JOIN [user] u WITH (NOLOCK) ON (u.id=l.id_user AND u.id_client='#{id_client}') " +
                      "WHERE source_id='#{pid}' "
              nListsAllocations = 0
              nListsAllocationsCRM = DB[q].first[:n].to_i
              sListsAllocationsText = ""
          %>

            <tr id="<%= pid%>">

              <input type='hidden' id='number-of-lists-exported-<%=pid%>' name='number-of-lists-exported-<%=pid%>' value='<%=nListsAllocationsCRM.to_s%>' />


              <td align='center' valign='top'>
                <button class="btn disabled btn-<%= aColors[nColor]%> btn-large row-fluid" style='border-width:0px;'>
                  <span><%= signature%></span>
                </button>
              </td>

              <td width='15px'><span></span></td>

              <td width='55%' valign='top'><span class="opened-by">
							<table>
								<tr>
									<td valign='top' colspan=2>
										<b><%= pname%></b>
                    <%
                      if (rowTimeAgo != nil)
                    %>
											<span class="text-info">verified: <%=rowTimeAgo[:timeago]%></span>
											<%
                        else
                      %>
											<span class="text-warning">not verified</span>
											<%
                        end
                      %>
                    <!--
									| <span style='font-size:10px;color:gray;'><i class="icon-search"></i> <%= sname%></span> | <span style='font-size:10px;color:gray;'><%= DateTime.new(allocation_year, allocation_month, allocation_day, 0, 0, 0).strftime("%B %d, %Y")%></span>
									-->
									</td>
								</tr>

                <!--
								<tr>
								<td valign='top' align='center'><i class="icon-map-marker"></i></td><td><a href="./results?page=1&filter_lname=<%= lname%>"><%= lname%></a></td>
								</tr>
								<tr>
								<td valign='top' align='center'><i class="icon-wrench"></i></td><td><a href="./results?page=1&filter_iname=<%= iname%>"><%= iname%></a></td>
								</tr>
								<tr>
								<td valign='top' align='center'><i class="icon-hospital"></i></td><td><a href="./results?page=1&filter_iname=<%= cname%>"><%= cname%></a></td>
								</tr>
								-->

                <tr>
									<td valign='top' align='center'><i class="icon-map-marker"></i></td><td><%= lname%></td>
								</tr>
								<tr>
									<td valign='top' align='center'><i class="icon-wrench"></i></td><td><%= iname%></td>
								</tr>
								<tr>
									<td valign='top' align='center'><i class="icon-hospital"></i></td><td><%= cname%></td>
								</tr>
	
								<tr>
									<td></td><td valign='top' align='left' style='color:gray'><b>Insight:</b> <%= phead%></td>
								</tr>
	
								<tr>
									<td></td><td valign='top' align='left' style='color:gray'><b>Insight:</b> <%= ptitl%></td>
								</tr>
	
								<tr></tr>
							</table> </span></td>
              <td width='5%'></td>
              <td width='35%' valign='top' align='right'>

                <table width='100%' class='appear_on_mouse_over'>
                  <tr height='15px'>
                    <td valign='top' width='75px'>
                      <div class="btn-group">

                        <button class='btn btn-small btn-blue get-email-<%= pid%>'>
                          Export
                        </button>
                        <button class="btn btn-small btn-blue dropdown-toggle get-email-<%= pid%>" data-toggle="dropdown">
                          <span class="caret"></span>
                        </button>

                        <ul class="dropdown-menu">
                          <li class="nav-header">
                            <i class="icon-th-list"></i> Export to CRM Lists
                          </li>

                          <%
                            nListsAllocationsCRM = 0
                            q =
                                "SELECT l.id AS lid " +
                                    "FROM crmlist l WITH (NOLOCK) " +
                                    "JOIN [user] u WITH (NOLOCK) ON (u.id=l.id_user AND u.id_client='#{id_client}') "
                            DB[q].all { |row|
                              l = CrmList.where(:id=>row[:lid]).first
                              lid = l.id.gsub("{", "").gsub("}", "")

                              # pregunto si el lead ya esta asignado a esta lista
                              q2 =
                                  "SELECT d.id " +
                                      "FROM crmlead d WITH (NOLOCK) " +
                                      "JOIN profile p WITH (NOLOCK) ON (p.id=d.source_id AND p.id='#{pid}') " +
                                      "WHERE d.id_crmlist='#{l.id}'"
                              d = DB[q2].first

                              if (d==nil)
                                if (balance==nil)
                          %>
                                <li class='disabled'>
                                  <a style='color:gray;'><%= l.name%></a>
                                </li>
                              <%
                                elsif (balance.credits==0)
                              %>
                                <li class='disabled'>
                                  <a style='color:gray;'><%= l.name%></a>
                                </li>
                              <%
                                else
                              %>
                                <li>
                                  <a id='listname-<%= lid%>-<%= pid%>' onclick="exportLead('<%= pid%>', '<%= lid%>');"><%= l.name%></a>
                                </li>
                              <%
                                end
                                else
                                  nListsAllocationsCRM += 1
                              %>
                              <li>
                                <a style='color:gray;'><%= l.name%></a>
                              </li>
                            <%
                              end
                              }
                            %>

                        </ul>
                      </div></td>
                  </tr>

                  <tr>
                    <td colspan=2><span style='font-size:12px'>
									<span id='emails-<%= pid%>' style='color:gray'> 
										<!--
										<i class="icon-plus"></i><%=pid.to_s%><br/>
										-->
                    <%
                      p = BlackStack::Profile.where(:id=>pid).first

                      p.getEmails().each { |email|
                    %>
											<i class="icon-envelope"></i>
                      <%
                        if (nListsAllocationsCRM.to_i>0)
                      %>
											<%=email%>
                        <br/>
											<%
                        else
                      %>
											...@....com
											<br/>
											<%
                        end
                        }

                        p.getPhones().each { |phone|
                      %>
											<i class="icon-mobile-phone"></i>
                      <%
                        if (nListsAllocationsCRM.to_i>0)
                      %>
											<%=phone%>
                        <br/>
											<%
                        else
                      %>
											...@....com
											<br/>
											<%
                        end
                        }

                        p.getSocialProfiles().each { |data|
                      %>
											<i class="<%=BlackStack::Append.iconNameFromDataType(data[:type].to_i)%>"></i>
                      <%
                        if (nListsAllocationsCRM.to_i>0)
                      %>
											<a href='<%=data[:value]%>' target='_window'><%=data[:value]%></a>
											<br/>
											<%
                        else
                      %>
											...
											<br/>
											<%
                        end
                        }

                        p.getCompanyData().each { |data|
                      %>
											<i class="<%=BlackStack::Append.iconNameFromDataType(data[:type].to_i)%>"></i>
                      <%
                        if (nListsAllocationsCRM.to_i>0)
                      %>
											<%=data[:value]%> <span style='color:gray;font-size:8pt;'>(<%=data[:company_name]%>)</span>
											<br/>
											<%
                        else
                      %>
											...
											<br/>
											<%
                        end
                        }
                      %>
	
									</span>
                    </td>
                  </tr>
                </table>
                <!-- PAGAR ACA -->
              </td>
            </tr>

            <tr height="25px">
              <td></td>
            </tr>

          <%
            }
          %>
        </table>
      </div>

      <br/>

      <div class="pagination">
        <!--
				<ul>
				<%
        if (page.to_i>1)
      %>
				<li>
				<a href="./results?page=<%= (page.to_i-1).to_s%>">Prev</a>
				</li>
				<%
        else
      %>
				<li class="disabled">
				<a href="#">Prev</a>
				</li>
				<%
        end

        i=1
        i_prev = 1
        while (i<=pages.to_i)
          if (i==page.to_i)
            sClassActive="class='active'"
          else
            sClassActive=""
          end

          if ( i==1 || i==pages.to_i || (i>=page.to_i-2 && i<=page.to_i+2) )

            if (i>i_prev+1)
      %><li><span>...</span></li><%
        end

      %>
				<li <%= sClassActive%>>
				<a href="./results?page=<%= i.to_s%>"><%= i.to_s%></a>
				</li>
				<%
        i_prev=i
        end # if
        i=i+1
        end # while

        if (page.to_i<pages.to_i)
      %>
				<li>
				<a href="./results?page=<%= (page.to_i+1).to_s%>">Next</a>
				</li>
				<%
        else
      %>
				<li class="disabled">
				<a href="#">Next</a>
				</li>
				<%
        end
      %>
				</ul>
				-->
      </div>

    </section>
  </section>

</section>


<script>
    function addFilter(field_name, field_value, is_positive) {
        form = $("#formWizard")
        $("#field", form).val(field_name)
        $("#value", form).val(field_value)
        $("#action", form).val("add_filter")
        if ( is_positive == true ) {
            $("#positive", form).val("yes") ;
        } else {
            $("#positive", form).val("no") ;
        }
        form.submit()
    }

    function createSearch() {
        form = $("#formWizard")
        $("#action", form).val("createsearch")
        form.submit()
    }

    $(document).ready(function() {
        // seteo los tabindex
        $("#position").attr("tabindex", 1);
        $("#industry").attr("tabindex", 2);
        $("#location").attr("tabindex", 3);
        $("#gotostep2").attr("tabindex", 4);

        // seteo focus
        $("#<%=focus%>").focus();
    });

    $("#position").keypress(function (e) {
        var key = e.which;
        if (key == 13) {
            addFilter('position', $("#position").val(), true);
            return false;
        }
    });

    $("#industry").keypress(function (e) {
        var key = e.which;
        if (key == 13) {
            addFilter('industry', $("#industry").val(), true);
            return false;
        }
    });

    $("#location").keypress(function (e) {
        var key = e.which;
        if (key == 13) {
            addFilter('location', $("#location").val(), true);
            return false;
        }
    });

    $("#show_name_filter_panel").click(function() {
        command = $(this).text();

        if (command == "show ") {
            $("#name_filter_panel").css("visibility", "visible");
            $("#name_filter_panel").css('height', 'auto');
            $(this).html("hide <i class='icon-caret-up'></i>")
        } else {
            $("#name_filter_panel").css("visibility", "hidden");
            $("#name_filter_panel").css('height', '0');
            $(this).html("show <i class='icon-caret-down'></i>")
        }
    });

    $("#show_location_filter_panel").click(function() {
        command = $(this).text();

        if (command == "show ") {
            $("#location_filter_panel").css("visibility", "visible");
            $("#location_filter_panel").css('height', 'auto');
            $(this).html("hide <i class='icon-caret-up'></i>")
        } else {
            $("#location_filter_panel").css("visibility", "hidden");
            $("#location_filter_panel").css('height', '0');
            $(this).html("show <i class='icon-caret-down'></i>")
        }
    });

    $("#show_industry_filter_panel").click(function() {
        command = $(this).text();

        if (command == "show ") {
            $("#industry_filter_panel").css("visibility", "visible");
            $("#industry_filter_panel").css('height', 'auto');
            $(this).html("hide <i class='icon-caret-up'></i>")
        } else {
            $("#industry_filter_panel").css("visibility", "hidden");
            $("#industry_filter_panel").css('height', '0');
            $(this).html("show <i class='icon-caret-down'></i>")
        }
    });

    $(".gotostep1").click(function (e) {
        form = $("#formWizard")
        $("#action", form).val("gotostep1")
        form.submit()
    });

    $(".gotostep2").click(function (e) {
        form = $("#formWizard")
        $("#action", form).val("gotostep2")
        form.submit()
    });

    $(".gotostep3").click(function (e) {
        form = $("#formWizard")
        $("#action", form).val("gotostep3")
        form.submit()
    });

    $(".createsearch").click(function (e) {
        createSearch();
    });

    $("#sname").keypress(function (e) {
        var key = e.which;
        if (key == 13) {
            createSearch();
            return false;
        }
    });

    $(".choosesearch").click(function (e) {
        form = $("#formWizard")
        $("#sid", form).val( $(this).val() )
        $("#action", form).val("choosesearch")
        form.submit()
    });

    $(".exportresults").click(function (e) {
        form = $("#formWizard")
        $("#action", form).val("exportresults")
        form.submit()
    });

    <%
      # IMPORTANTE: Un numeero de pagina elevando (en el orden de los miles) puede traer un problema de query-timeout
      # => por eso es importante limitar el numero de pagina a 100, ofreciendo un buen sistema de filtros.
      last_page = pages.to_i
       if (last_page > max_pages)
        last_page = max_pages
      end
    %>
    drawPagination($(".pagination"),<%= page.to_i%>,<%= last_page.to_i%>,'results',"<%=url.gsub('"','\"').to_s%>&page=");</script>

<%
  DB.disconnect
  GC.start
%>
</script>