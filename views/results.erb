<%
    # map some params who are specific for for the filter
    redirect_on_error = session['redirect_on_error']

    # setup default values
    redirect_on_error = "/leads/results" if redirect_on_error.to_s.size == 0

    begin

      puts 'yayy params'
      puts params.inspect
      puts 'yayy params'


      # user preferences regarding the sorting
        order_column = @login.user.preference('settings.users.order.column', 'name', params[:column])
        order_direction = @login.user.preference('settings.users.order.direction', 'asc', params[:direction])

        positions_positive = params["job_positions_positive"].class == Array ?
                               Leads::FlLead.map_array_to_str(params["job_positions_positive"]) : ''
        positions_negative = params["job_positions_negative"].class == Array ?
                               Leads::FlLead.map_array_to_str(params["job_positions_negative"]) : ''

        locations_positive = params["locations_positive"].class == Array ?
                               Leads::FlLead.map_array_to_str(params["locations_positive"]) : ''
        locations_negative = params["locations_negative"].class == Array ?
                               Leads::FlLead.map_array_to_str(params["locations_negative"]) : ''

        industries_positive = params["industries_positive"].class == Array ?
                                Leads::FlLead.map_array_to_str(params["industries_positive"]) : ''
        industries_negative = params["industries_negative"].class == Array ?
                                Leads::FlLead.map_array_to_str(params["industries_negative"]) : ''


        @login.user.preference('settings.users.positions_positive', '', positions_positive)
        @login.user.preference('settings.users.positions_negative', '', positions_negative)
        @login.user.preference('settings.users.locations_positive', '', locations_positive)
        @login.user.preference('settings.users.locations_negative', '', locations_negative)
        @login.user.preference('settings.users.industries_positive', '', industries_positive)
        @login.user.preference('settings.users.industries_negative', '', industries_negative)

        q0 = "
    SELECT l.name, l.position, l.stat_company_name, l.stat_industry_name, l.stat_location_name,
            l.id as id FROM \"fl_lead\" l where l.name IS NOT NULL "
        q0 += "AND l.position IN (#{positions_positive}) " unless positions_positive.empty?
        q0 += "AND l.position NOT IN (#{positions_negative}) " unless positions_negative.empty?
        q0 += "AND l.id_industry IN (#{industries_positive}) " unless industries_positive.empty?
        q0 += "AND l.id_industry NOT IN (#{industries_negative}) " unless industries_negative.empty?
        q0 += "AND l.id_location IN (#{locations_positive}) " unless locations_positive.empty?
        q0 += "AND l.id_location NOT IN (#{locations_negative}) " unless locations_negative.empty?

        filter_name = @login.user.preference("developers.tables.basics.filter.name", "", params[:name])
        filter_company = @login.user.preference("developers.tables.basics.filter.company", "", params[:company])


        q0 += "
          AND l.name LIKE '%"+filter_name.to_s.to_sql+"%'
        " if filter_name.to_s.length > 0

        q0 += "
          AND l.stat_company_name LIKE '%"+filter_company.to_s.to_sql+"%'
        " if filter_company.to_s.length > 0



        page_size = 3
        total_rows = DB[q0].count
        total_pages = (total_rows.to_f/page_size.to_f).ceil
        # if there is a GET parameters `number` on the URL, update the user preference regarding the page number on this screen
        # then, get user preferences regarding the page number on this screen
        page_number = @login.user.preference("developers.tables.basics.pagination.page", 1, params[:number].nil? ? nil : params[:number].to_i)
        # pagination correction to prevent glitches
        page_number = 1 if page_number < 1
        page_number = total_pages if page_number > total_pages
        # calculate info for showing at the bottom of the table
        from_row = (page_number.to_i-1) * page_size.to_i + 1
        to_row = [page_number*page_size, total_rows].min

        q = "
        "+q0+"
	LIMIT "+(page_number*page_size).to_label+"
	OFFSET "+((page_number.to_i - 1) * page_size.to_i).to_label+"
        "


        puts q


        # build the array of objects
        leads = []

        DB["#{q}"].all do |row|
          leads << row
          # release resources on each iteration
          GC.start
          DB.disconnect
        end

        s = nil
        DB.transaction do
            # crear el cliente
            s = Leads::FlSearch.new({:saved => false, :id_user=>@login.user.id, :no_of_results => leads.size})
            s.save
        end # transaction

        # return { status: :ok, leads: leads, from_row: from_row, to_row: to_row, page_number: page_number,
        #          total_pages: total_pages, total_rows: total_rows, search_id: s.id }.to_json

    rescue => e
        # libero recursos
        DB.disconnect
        GC.start
        # return errors
        return { status: :error, errors: CGI::escape(e.message) }.to_json
    end
%>


<section class="container box">
  <section class="row-fluid">
    <section class='span6'>
      <%=nav1("Results")%>
    </section>
    <section class='span6' style='text-align:right;'>
      <!-- TODO: add buttons here -->
      <button class="btn btn-success">Get Free Credits</button>
      <button class="btn btn-primary">Search</button>
    </section>
	</section>

  <br><br>

  <form id="search-form" action="/leads/filter_results" method="post">

    <section class="row-fluid">
      <section class="span4">
        <div id='job_title'></div>
      </section>
      <section class='span8' style='text-align:right;'>
        <button type="button" class="btn btn-cyan" data-toggle="modal" data-target=".export_leads">Exports Leads</button>
      </section>
    </section>

    <section class="row-fluid">
      <section class="span4">
        <div id='locations'></div>
      </section>
      <section class='span8' style="padding-left: 5%">
        <h3> <span id="total-results" style="background: black; color: white">500</span> No. of Results </h3>
        <h3> <span style="background: black; color: white">500</span> No. of Companies </h3>
      </section>
    </section>

    <section class="row-fluid">
      <section class="span4">
        <div id='industry'></div>
        <button id="reset-filters" class="btn btn-danger">Clear Filter</button>
        <button id="search-btn" class="btn btn-primary" type="submit">Search</button>
      </section>
      <section class='span8'>
        <table id="results-table" class="table table-bordered">
          <thead>
          <tr>
            <div class="pull-right">
              <div class="span8">
                <input type='text' class='input-block-level select-all-on-focus' id='search_filter' name='search_filter'/>
              </div>

              <button class="btn btn-blue btn-medium btn-submit" style="margin-left: 2px;" type="submit" onclick="">
                <i class='icon-search'></i> Search
              </button>
            </div>
          </tr>
          <tr>
            <th>Name <i class="icon-sort-up"></i></th>
            <th>Position </th>
            <th>Location</th>
            <th>Email</th>
            <th>Phone No.</th>
          </tr>
          </thead>
          <tbody>

          <form id="filters-form" action="/leads/results" method="get">
            <tr>
              <th><input class="input input-block-level" id="name-filter" name="name" value="<%=filter_name.to_s.encode_html%>" /></th>
              <th></th>
              <th><input class="input input-block-level" id="company-filter" name="company" value="<%=filter_company.to_s.encode_html%>" /></th>
              <th></th>
              <th></th>
              <th><button type="submit" class="btn btn-link">Search</button></th>
            </tr>
          </form>


          <%
              leads.each do |row|
          %>
            <tr>
              <td><%=row[:name]%></td>
              <td><%=row[:position]%></td>
              <td><%=row[:stat_company_name]%></td>
              <td><%=row[:stat_industry_name]%></td>
              <td><%=row[:stat_location_name]%></td>
            </tr>
          <%
              end
          %>

          </tbody>
        </table>
        <p><b>Records:</b> <%=from_row.to_label%> to <%=to_row.to_label%> <b>of</b> <%=total_rows.to_label%></p>
        <div class="pagination"></div>
        <script>
            drawPagination($(".pagination"), <%=page_number%>, <%=total_pages%>);
        </script>
        <br>
        <button type="button" style="float: right" class="btn btn-primary" data-toggle="modal" data-target=".save_modal">Save Search</button>
      </section>
    </section>

  </form>
</section>


<!-- Modal Exports Leads-->
<div class="modal fade export_leads" >
  <div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
    <h3>Exports Contacts</h3>
  </div>
  <div class="modal-body">
    <div class="row-fluid">Contacts per Company</div>
    <div class="radio">
      <label><input type="radio" name="optradio" checked>Multiple (Recommended)</label>
    </div>
    <div class="radio">
      <label><input type="radio" name="optradio" >One</label>
    </div>
    <div style="margin-top: 5px;">Total Contacts </div>
    <div>
      <div class="radio">
        <label><input type="radio" name="optradio1">Export only first <input type="text" name="no_of_contacts" placeholder="102">
          contacts</label>
      </div>
    </div>
    <div class="row-fluid">Name your file
      <input type="text" name="file_name" placeholder="sample">
      .csv
    </div>
  </div>
  <div class="modal-footer">
    <a href="#" data-dismiss="modal" class="btn">Close</a>
    <a href="#" class="btn btn-primary">Save</a>
  </div>
</div>
<!-- Modal Save Search-->
<div class="modal fade save_modal" >
  <div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
    <h3>Save this search</h3>
  </div>
  <form action="/leads/filter_save_search" method="post"></form>
      <div class="modal-body">
        <p>Enter description for saved search</p>
        <div class="span12">
          <input type="hidden" id="search-id" name="search-id">
          <input class="span11" placeholder="Name" name="search-name" rows="3" id="search-name"/>
        </div>
        <br>
        <div class="span12">
          <textarea class="span11" placeholder="Description" name="description" rows="3" id="description"></textarea>
        </div>
      </div>
      <div class="modal-footer">
        <a href="#" data-dismiss="modal" class="btn">Close</a>
        <button type="submit" id="save-search" class="btn btn-primary">Save</button>
      </div>
  </form>
</div>

<script type="text/javascript" charset="utf-8">

    let job_title = document.getElementById('job_title');
    let locations = document.getElementById('locations');
    let industry = document.getElementById('industry');


    let industries_hash = []
    <% Leads::FlIndustry.all.each do |industry| %>
        industries_hash["<%= industry.name %>"] =  "<%= industry.id %>"
    <% end %>

    let locations_hash = {};
    <% Leads::FlLocation.all.each do |location| %>
        locations_hash["<%= location.name %>"] = "<%= location.id %>"
    <% end %>

    filtersJs.draw(job_title, {
        label: "Job Title",
        allowed_positive_keywords: true,
        allowed_negative_keywords: true,
    });


    filtersJs.draw(locations, {
        label: "Locations",
        allowed_positive_keywords: true,
        allowed_negative_keywords: true,
        allowed_values: Object.keys(locations_hash),
    });

    filtersJs.draw(industry, {
        label: "Industry",
        allowed_positive_keywords: true,
        allowed_negative_keywords: true,
        allowed_values: Object.keys(industries_hash),
    });

    // $(job_title).find('#keyword').on('change', function() {
    //     console.log('yeah');
    //     if (filtersJs.getPositiveValues(job_title).length > 0) {
    //         $("#search-btn").removeAttr("disabled");
    //     }
    // });

    $(document).ready(function () {


        $("#filters-form").submit(function (event) {
            event.preventDefault();
            process_and_submit();
        });

        $("#search-form").submit(function (event) {
            event.preventDefault();
            process_and_submit();
        });

        $("#save-search").on('click', function () {

            let formData = {
                name: $('#search-name').val(),
                description: $('#description').val(),
                search_id: $('#search-id').val()
            };

            $.ajax({
                type: "POST",
                url: "/leads/filter_save_search",
                data: formData,
                dataType: "json",
                encode: true,
            }).done(function (data) {
                console.log(data);
                $('.save_modal').modal('hide');
            });

        });

    });

    function process_and_submit(){
        let job_positions_positive = filtersJs.getPositiveValues(job_title);
        let job_positions_negative = filtersJs.getNegativeValues(job_title);

        let locations_positive = jQuery.map( filtersJs.getPositiveValues(locations), function( a ) {
            return locations_hash[a.trim()];
        });
        let locations_negative = jQuery.map( filtersJs.getNegativeValues(locations), function( a ) {
            return locations_hash[a.trim()];
        });

        let industries_positive = jQuery.map( filtersJs.getPositiveValues(industry), function( a ) {
            return industries_hash[a.trim()];
        });
        let industries_negative = jQuery.map( filtersJs.getNegativeValues(industry), function( a ) {
            return industries_hash[a.trim()];
        });

        let name_filter = $('#name-filter').val();
        let company_filter = $('#company-filter').val();

        let formData = {
            job_positions_positive: job_positions_positive,
            job_positions_negative: job_positions_negative,
            locations_positive: locations_positive,
            locations_negative: locations_negative,
            industries_positive: industries_positive,
            industries_negative: industries_negative,
        };

        // if (name_filter !== null || company_filter !== null){
        //     formData.name = name_filter;
        //     formData.company = company_filter
        // }

        $.ajax({
            type: "GET",
            url: `/leads/results?name=${name_filter}&company=${company_filter}`,
            data: formData,
            dataType: "json",
            encode: true,
        }).done(function () {
            $("#results-table > tbody").empty();
        });
    }

    $('#reset-filters').on('click', function () {
       window.location.reload();
    });

</script>
<script>
</script>










