<%
  # map some params who are specific for for the filter
  redirect_on_error = session['redirect_on_error']

  # setup default values
  redirect_on_error = "/leads/results" if redirect_on_error.to_s.size == 0
  redirect_on_success = "/leads/results" if redirect_on_success.to_s.size == 0

  puts params
  begin

    contact_per_company = params["optradio"] if params["optradio"] != nil
    export_only_first = params["optradio1"] if params["optradio1"] != nil
    no_of_contacts = params["no_of_contacts"] if params["no_of_contacts"] != nil
    file_name = params["file_name"] if params["file_name"] != nil


    @login.user.preference('settings.users.contact_per_company', '', contact_per_company)
    @login.user.preference('settings.users.export_only_first', '', export_only_first)
    @login.user.preference('settings.users.no_of_contacts', '', no_of_contacts)
    @login.user.preference('settings.users.file_name', '', file_name)



    s = nil
    DB.transaction do
      # crear el cliente
      s = Leads::FlSearch.new({:saved => false, :id_user=>@login.user.id})
      s.save

      export = Leads::FlExport.new({:allow_multiple_contacts_per_company => contact_per_company,
                                    :id_user=>@login.user.id, :id_search => s.id,
                                    :number_of_records => no_of_contacts, :filename => file_name})
      export.save
    end # transaction


  rescue => e
    # libero recursos
    DB.disconnect
    GC.start
    # return errors
    redirect "#{redirect_on_error}?err="+ CGI::escape(e.message)
  end


  # blanquo la variable de sesion de r
  session['redirect_on_success'] = nil
  # redirect
  redirect redirect_on_success
%>