<!-- HERE IS HOW TO CATCH POST/GET PARAMETERS -->
<% 
email = params[:email]
password = params[:password]
client = nil
user = nil
division = nil
userDivision = nil
login = nil
id_login = nil

# validar que los parametros no esten vacios
if (email.to_s.size==0)
	DB.disconnect
	GC.start
	redirect_adapted_to_nginx getDivisionURL + '/freeleads/landing?err=Email%20is%20Required'
end

=begin
if !password.password?
	redirect_adapted_to_nginx getDivisionURL + '/freeleads/landing?err='
end
=end

# comparar contra la base de datos
user = BlackStack::User.where(:email=>email).first

# TODO: Validar formato del email

# TODO: Validar normas de seguridad de la password

# TODO: Validar formato de la password

if (user!=nil)

	if (password.to_s.size==0)
		# genero una password aleatoria
		password = user.password.to_s
	end

	DB.transaction do
		# crear el cliente
		client = BlackStack::Client.where(:id=>user.id).first
		
		# actualizo el usuario
		user.password=password
		user.save()
		
		# vinculo el usuario a esta division
		userDivision = BlackStack::UserDivision.where(:id_user=>user.id).first

		# Validar que se haya conseguido una division
		if ( userDivision != nil )
			# obtengo la division
			division = BlackStack::Division.where(:id=>userDivision.id_division).first
		else
			# le asigno una division 
			division = BlackStack::Division.getDefault()
			
			# TODO: Validar que se haya conseguido una division
			
			# vinculo el usuario a esta division
			userDivision = BlackStack::UserDivision.new()
			userDivision.id = guid()
			userDivision.id_user = user.id
			userDivision.id_division = division.id
			userDivision.save()
		end
	end # transaction

	# envio un request a la division para que registre a este usuario
	# TODO: Si la llamada de abajo falla, el servidor central debe redirigir a una pagina de error, 
	# => y debe reintentar el alta en la division cuando el usuario haga un intento de login.
	url = "#{BlackStack::Pampa::api_protocol}://#{division.app_url}:#{division.app_port}/api1.2/division/login.json"
	res = BlackStack::Netting::call_post(
		url, 
		{'api_key' => BlackStack::Pampa::api_key, 
		'email' => user.division_email}
		)

	# TODO: validar que el estado de la respuesta sea success
	parsed = JSON.parse(res.body)
	if (parsed['status'] != "success")
		DB.disconnect
		GC.start
		redirect_adapted_to_nginx getDivisionURL + '/freeleads/landing?err='+CGI.escape("Unexpected Login Error:"+parsed['status'])
	end
	id_login = parsed['id_login']
	
else # user != nil
	
	if (password.to_s.size==0)
		# genero una password aleatoria
		password = guid()[1..5]
	end

	DB.transaction do
		# crear el cliente
		client = BlackStack::Client.new()
		client.id = guid()
		client.name = email
		client.save()
		
		# crear el usuario
		user = BlackStack::User.new()
		user.id = guid()
		user.id_client = client.id
		user.email = email
		user.password = password
		user.create_time = now()
		user.division_email = email
		user.save()
		
		# le asigno una division 
		division = BlackStack::Division.getDefault()
		
		# TODO: Validar que se haya conseguido una division
		
		# vinculo el usuario a esta division
		userDivision = BlackStack::UserDivision.new()
		userDivision.id = guid()
		userDivision.id_user = user.id
		userDivision.id_division = division.id
		userDivision.save()
		
	end # transaction

	# envio un request a la division para que registre a este usuario
	# TODO: Si la llamada de abajo falla, el servidor central debe redirigir a una pagina de error, 
	# => y debe reintentar el alta en la division cuando el usuario haga un intento de login.
	url = "#{BlackStack::Pampa::api_protocol}://#{division.app_url}:#{division.app_port}/api1.2/division/signup.json"
	res = BlackStack::Netting::call_post(
		url, 
		{'api_key' => BlackStack::Pampa::api_key, 
		'cid' => client.id,
		'uid' => user.id,
		'email' => user.division_email,
		'companyname' => user.division_email,
		'username' => user.division_email,}
		)

	# TODO: validar que el estado de la respuesta sea success
	parsed = JSON.parse(res.body)
	if (parsed['status'] != "success")
		DB.disconnect
		GC.start
		redirect_adapted_to_nginx getDivisionURL + '/freeleads/landing?err='+CGI.escape("Unexpected Signup Error:"+parsed['status'])
	end
	id_login = parsed['id_login']

	# TODO: lo agrego a la lista de suscripcion (Mailchimp)

end # 

# registrar el login
# en caso que la central y la division compartan la misma base de datos, debo verificar que el login no haya sido ya creado.
login = BlackStack::Login.where(:id=>id_login).first
if (login == nil)
	login = BlackStack::Login.new
	login.id = id_login
	login.id_user = user.id
	login.create_time = now()
	login.save()
end

# guardar el ID de intento de login en una variable de sesion
session['login.id'] = login.id

# envio el correo electronico de bienvenida
n = NotificationWelcomeToFreeLeadsData.new()
n.id = guid()
n.create_time = now()
n.id_user = user.id
n.name_to = user.email
n.email_to = user.email
n.name_from = NOTIFICATIONS[:from_name]
n.email_from = NOTIFICATIONS[:from_email]
n.send() # el metodo SEND se encarga tambien de guardar el objeto

if false
# envio el correo electronico de confirmacion
n = NotificationConfirm.new()
n.id = guid()
n.create_time = now()
n.id_user = user.id
n.name_to = user.email
n.email_to = user.email
n.name_from = NOTIFICATIONS[:from_name]
n.email_from = NOTIFICATIONS[:from_email]
n.send() # el metodo SEND se encarga tambien de guardar el objeto 
end # false

DB.disconnect
GC.start

redirect_adapted_to_nginx getDivisionURL + '/freeleads/tripwire?title=1'
%>
<!-- ---------------------------------------- -->
